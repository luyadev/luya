(function() {
	"use strict";
	
	zaa.config(function($stateProvider, resolverProvider) {
		$stateProvider
		.state("default.route.detail", {
			url: "/:id",
			parent: 'default.route',
			template: '<ui-view/>',
			controller:function($scope, $stateParams) {
				
				$scope.crud = $scope.$parent;
				
				$scope.init = function() {
					if (!$scope.crud.config.inline) {
						if ($scope.crud.data.updateId != $stateParams.id) {
							$scope.crud.toggleUpdate($stateParams.id);
						}
					}
				}
				
				$scope.init();
			}
		})
	});
	
	// CrudController.js
	/**
	 * Base Crud Controller
	 * 
	 * Assigned config variables from the php view assigned from child to parent:
	 * 
	 * + bool $config.inline Determines whether this crud is in inline mode orno
	 */
	zaa.controller("CrudController", function($scope, $filter, $http, $sce, $state, $timeout, $injector, AdminLangService, LuyaLoading, AdminToastService, CrudTabService) {

		LuyaLoading.start();
		
		$scope.toast = AdminToastService;
		
		/*
		 * 6.10.2015: remove dialogs, add variable toggler to display. added ngSwitch
		 */
		$scope.AdminLangService = AdminLangService;
		
		$scope.tabService = CrudTabService;
		
		/**
		 * As we have changed to ng-if some variables need to get pased by an object in order to keep the parent scope, as ng-if create a new scope.
		 */
		$scope.config = {
			filter: '0', groupBy: 0, groupByField: '0', pagerHiddenByAjaxSearch: false, fullSearchContainer: false,
			minLengthWarning: false
		};
		
		/**
		 * 0 = list
		 * 1 = add
		 * 2 = edit
		 */
		$scope.crudSwitchType = 0;
		
		$scope.switchToTab = function(tab) {
			angular.forEach($scope.tabService.tabs, function(item) {
				item.active = false;
			});
			
			tab.active = true;
			
			$scope.switchTo(4);
		};
		
		$scope.closeTab = function(tab, index) {
			$scope.tabService.remove(index, $scope);
		};
		
		$scope.switchTo = function(type, reset) {
			
			if ($scope.relationCall) {
				$scope.crudSwitchType = type;
				return;
			}
			
			if (reset) {
				$scope.resetData();
			}
			
			if (type == 0) {
				$http.get($scope.config.apiEndpoint + '/unlock');
			}
			
			if (type == 0 || type == 1) {
				if (!$scope.config.inline) {
					$state.go('default.route');
				}
			}
			$scope.crudSwitchType = type;
			
			if (type !== 4) {
				angular.forEach($scope.tabService.tabs, function(item) {
					item.active = false;
				});
			}
		};
		
		$scope.relationCall = false;
		
		$scope.changeGroupByField = function() {
			if ($scope.config.groupByField == 0) {
				$scope.config.groupBy = 0;
			} else {
				$scope.config.groupBy = 1;
			}
		}
		
		$scope.relationItems = [];
		
		/*
		$scope.loadRelation = function(id, api, where) {
			$scope.relationItems.push({'active': true, 'api': api, 'id': id, 'where': where});
			$scope.switchTo(4);
		}
		*/
		
		// ng-change event triggers this method
		// this method is also used withing after save/update events in order to retrieve current selecter filter data.
		$scope.realoadCrudList = function(pageId) {
			LuyaLoading.start();
			if ($scope.config.filter == 0) {
				 $scope.loadList(pageId);
			} else {
				var url = $scope.config.apiEndpoint + '/filter?filterName=' + $scope.config.filter + '&' + $scope.config.apiListQueryString;
				if (pageId) {
					url = url + '&page=' + pageId;
				}
				if ($scope.config.orderBy) {
					url = url + '&sort=' + $scope.config.orderBy.replace("+", "");
				}
				$http.get(url).then(function(response) {
					$scope.setPagination(
						response.headers('X-Pagination-Current-Page'),
						response.headers('X-Pagination-Page-Count'),
						response.headers('X-Pagination-Per-Page'),
						response.headers('X-Pagination-Total-Count')
					);
					LuyaLoading.stop();
					$scope.data.list = response.data;
					$scope.data.listArray = response.data;
					$scope.reApplyOrder();
				});
			}
		};
		
		$scope.$watch('config.searchQuery', function(n, o) {
			
			if (n == o) {
				return;
			}
			
			var blockRequest = false;
			
			if ($scope.pager) {
				if (n.length == 0) {
					$timeout.cancel($scope.searchPromise);
					$scope.data.listArray = $scope.data.list;
					$scope.config.pagerHiddenByAjaxSearch = false;
				} else {
					$timeout.cancel($scope.searchPromise);
					
					if (blockRequest) {
						return;
					}
					
					$scope.searchPromise = $timeout(function() {
						if ($scope.config.fullSearchContainer) {
							$scope.data.listArray = $filter('filter')($scope.config.fullSearchContainer, n);
							$scope.config.pagerHiddenByAjaxSearch = true;
						} else {
							LuyaLoading.start();
							blockRequest = true;
							$http.post($scope.config.apiEndpoint + '/full-response?' + $scope.config.apiListQueryString, {query: n}).then(function(response) {
								$scope.config.pagerHiddenByAjaxSearch = true;
								$scope.config.fullSearchContainer = response.data;
								$scope.data.listArray = $filter('filter')(response.data, n);
								blockRequest = false;
								LuyaLoading.stop();
							});
						}
					}, 500)
				}
			} else {
				$scope.config.pagerHiddenByAjaxSearch = false;
				$scope.data.listArray = $filter('filter')($scope.data.list, n);
			}
		});
		
		/* export */
		
		$scope.exportLoading = false;
		
		$scope.exportResponse = false;
		
		$scope.exportDownloadButton = false;
		
		$scope.exportData = function() {
			$scope.exportLoading = true;
			$http.get($scope.config.apiEndpoint + '/export').then(function(response) {
				$scope.exportLoading = false;
				$scope.exportResponse = response.data;
				$scope.exportDownloadButton = true;
			});
		};
		
		$scope.exportDownload = function() {
			$scope.exportDownloadButton = false;
			window.open($scope.exportResponse.url);
			return false;
		}
		
		/* old definitions */
		
		$scope.parentController = $scope.$parent;
		
		$scope.applySaveCallback = function() {
			if ($scope.saveCallback != 0 && $scope.saveCallback != null && $scope.saveCallback != false) {
				$injector.invoke($scope.saveCallback, this);
			}
		}
		
		$scope.showCrudList = true;
		
		$scope.currentMenuItem = null;
		
		$scope.init = function () {
			$scope.loadList();
			$scope.$watch(function() { return $scope.parentController.currentItem }, function(newValue) {
				$scope.currentMenuItem = newValue;
			});
		};
		
		$scope.isOrderBy = function(field) {
			if (field == $scope.config.orderBy) {
				return true;
			}
			
			return false;
		};
		
		$scope.changeOrder = function(field, sort) {
			$scope.config.orderBy = sort + field;
			
			$http.post('admin/api-admin-common/ngrest-order', {'apiEndpoint' : $scope.config.apiEndpoint, sort: sort, field: field}, { ignoreLoadingBar: true });
			
			if ($scope.pager && !$scope.config.pagerHiddenByAjaxSearch) {
				$scope.realoadCrudList(1);
			} else {
				$scope.data.listArray = $filter('orderBy')($scope.data.listArray, sort + field);
			}
		};
		
		$scope.reApplyOrder = function() {
			$scope.data.listArray = $filter('orderBy')($scope.data.listArray, $scope.config.orderBy);
		};
		
		$scope.activeWindowReload = function() {
			$scope.getActiveWindow($scope.data.aw.hash, $scope.data.aw.itemId);
		}
		
		$scope.getActiveWindow = function (activeWindowId, id, $event) {
			$http.post($scope.config.activeWindowRenderUrl, $.param({ itemId : id, activeWindowHash : activeWindowId , ngrestConfigHash : $scope.config.ngrestConfigHash }), {
				headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
			})
			.then(function(response) {
				$scope.openActiveWindow();
				$scope.data.aw.itemId = id;
				$scope.data.aw.configCallbackUrl = $scope.config.activeWindowCallbackUrl;
				$scope.data.aw.configHash = $scope.config.ngrestConfigHash;
				$scope.data.aw.hash = activeWindowId;
				$scope.data.aw.id = activeWindowId; /* @todo: remove! BUT: equal to above, but still need in jquery accessing */
				$scope.data.aw.content = $sce.trustAsHtml(response.data);
				$scope.$broadcast('awloaded', {id: activeWindowId});
			})
		};
	
		$scope.getActiveWindowCallbackUrl = function(callback) {
			return $scope.data.aw.configCallbackUrl + '?activeWindowCallback=' + callback + '&ngrestConfigHash=' + $scope.data.aw.configHash + '&activeWindowHash=' + $scope.data.aw.hash;
		};
		
		/**
		 * new returns a promise promise.hten(function(answer) {
		 * 
		 * }, function(error) {
		 * 
		 * }, function(progress) {
		 * 
		 * });
		 * 
		 * instead of return variable
		 */
		$scope.sendActiveWindowCallback = function(callback, data) {
			var data = data || {};
			return $http.post($scope.getActiveWindowCallbackUrl(callback), $.param(data), {
				headers: {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
			});
		};
		
		$scope.deleteItem = function(id, $event) {
			AdminToastService.confirm(i18n['js_ngrest_rm_page'], function($timeout, $toast) {
				$http.delete($scope.config.apiEndpoint + '/'+id).then(function(response) {
					$scope.loadList();
					$toast.close();
					AdminToastService.success(i18n['js_ngrest_rm_confirm'], 2000);
				}, function(data) {
					$scope.printErrors(data);
				});
			});
		};
		
		$scope.toggleUpdate = function(id) {
			$scope.resetData();
			$http.get($scope.config.apiEndpoint + '/'+id+'?' + $scope.config.apiUpdateQueryString).then(function(response) {
				var data = response.data;
				$scope.data.update = data;
				
				if ($scope.relationCall) {
					
					$scope.crudSwitchType = 2;
				} else {
					$scope.switchTo(2);
				}
				if (!$scope.config.inline) {
					$state.go('default.route.detail', {id : id});
				}
				$scope.data.updateId = id;
			}, function(data) {
				AdminToastService.error(i18n['js_ngrest_error'], 2000);
			});
		};
		
		$scope.closeUpdate = function () {
			$scope.switchTo(0, true);
	    };
		
		$scope.closeCreate = function() {
			$scope.switchTo(0, true);
		};
		
		$scope.activeWindowModal = true;
		
		$scope.openActiveWindow = function() {
			$scope.activeWindowModal = false;
		};
		
		$scope.closeActiveWindow = function() {
			$scope.activeWindowModal = true;
		};
		
		$scope.highlightId = 0;
		
		$scope.isHighlighted = function(itemId) {
			if (itemId[$scope.config.pk] == $scope.highlightId) {
				return true;
			}
			
			return false;
		};
		
		$scope.printErrors = function(data) {
			angular.forEach(data, function(value, key) {
				AdminToastService.error(value.message, 4500);
			});
		};
		
		$scope.submitUpdate = function () {
			$http.put($scope.config.apiEndpoint + '/' + $scope.data.updateId, angular.toJson($scope.data.update, true)).then(function(response) {
				var data = response.data;
				if ($scope.pager) {
					$scope.realoadCrudList($scope.pager.currentPage);
				} else {
					$scope.realoadCrudList();
				}
				
				$scope.applySaveCallback();
				AdminToastService.success(i18n['js_ngrest_rm_update'], 2000);
				$scope.switchTo(0, true);
				$scope.highlightItemId($scope.data.updateId);
			}, function(response) {
				$scope.printErrors(response.data);
			});
		};
		
		$scope.highlightItemId = function(id) {
			$scope.highlightId = id;
			$timeout(function() {
				$scope.highlightId = 0;
			}, 3000);
		}
		
		$scope.submitCreate = function() {
			
			if ($scope.relationCall) {
				//$scope.data.create[$scope.relationCall.field] = parseInt($scope.relationCall.id);
			}
			
			$http.post($scope.config.apiEndpoint, angular.toJson($scope.data.create, true)).then(function(response) {
				$scope.realoadCrudList();
				$scope.applySaveCallback();
				AdminToastService.success(i18n['js_ngrest_rm_success'], 2000);
				$scope.switchTo(0, true);
			}).error(function(data) {
				$scope.printErrors(data);
			});
		};
		
		$scope.blockFilterSeriveReload = false;
		
		$scope.evalSettings = function(settings) {
			if (settings.hasOwnProperty('order')) {
				$scope.config.orderBy = settings['order'];
			}
			
			if (!$scope.blockFilterSeriveReload) {
				if (settings.hasOwnProperty('filterName')) {
					$scope.config.filter = settings['filterName'];
				}
			}
		};
		
		$scope.$watch('config.filter', function(n, o) {
			if (n != o && n != undefined) {
				$scope.blockFilterSeriveReload = true;
				$http.post('admin/api-admin-common/ngrest-filter', {'apiEndpoint' : $scope.config.apiEndpoint, 'filterName': $scope.config.filter}, { ignoreLoadingBar: true });
				$scope.realoadCrudList();
			}
		})
		
		/**
		 * This method is triggerd by the crudLoader directive to reload service data.
		 */
		$scope.loadService = function() {
			$http.get($scope.config.apiEndpoint + '/services').then(function(serviceResponse) {
				$scope.service = serviceResponse.data.service;
			});
		};
		
		$scope.loadList = function(pageId) {
			LuyaLoading.start();
			$http.get($scope.config.apiEndpoint + '/services').then(function(response) {
				var serviceResponse = response.data;
				$scope.service = serviceResponse.service;
				$scope.evalSettings(serviceResponse._settings);
				if ($scope.relationCall) {
					var url = $scope.config.apiEndpoint + '/relation-call/?' + $scope.config.apiListQueryString;
					url = url + '&arrayIndex=' + $scope.relationCall.arrayIndex + '&id=' + $scope.relationCall.id + '&modelClass=' + $scope.relationCall.modelClass;
				} else {
					var url = $scope.config.apiEndpoint + '/?' + $scope.config.apiListQueryString;
				}
				
				if (pageId !== undefined) {
					url = url + '&page=' + pageId;
				}
				if ($scope.config.orderBy) {
					url = url + '&sort=' + $scope.config.orderBy.replace("+", "");
				}
				$http.get(url).then(function(response) {
					$scope.setPagination(
						response.headers('X-Pagination-Current-Page'),
						response.headers('X-Pagination-Page-Count'),
						response.headers('X-Pagination-Per-Page'),
						response.headers('X-Pagination-Total-Count')
					);

					// return data
					LuyaLoading.stop();
					$scope.data.list = response.data;
					$scope.data.listArray = response.data;
					$scope.reApplyOrder();
				});
			});
		};
		
		$scope.service = false;
		
		$scope.resetData = function() {
			$scope.data.create = angular.copy({});
			$scope.data.update = angular.copy({});
		}
		
		$scope.pagerPrevClick = function() {
			if ($scope.pager.currentPage != 1) {
				$scope.realoadCrudList(parseInt($scope.pager.currentPage)-1);
			}
		};
		
		$scope.pagerNextClick = function() {
			if ($scope.pager.currentPage != $scope.pager.pageCount) {
				$scope.realoadCrudList(parseInt($scope.pager.currentPage)+1);
			}
		};
		
		$scope.pager = false;
		
		$scope.setPagination = function(currentPage, pageCount, perPage, totalItems) {
			if (currentPage != null && pageCount != null && perPage != null && totalItems != null) {
				
				var i = 1;
				var urls = [];
				for (i = 1; i <= pageCount; i++) {
					urls.push(i);
				}
				
				$scope.pager = {
					'currentPage': currentPage,
					'pageCount': pageCount,
					'perPage': perPage,
					'totalItems': totalItems,
					'pages': urls,
				};
			} else {
				$scope.pager = false;
			}
		}
		
		$scope.toggleStatus = function(row, fieldName, fieldLabel, bindValue) {
			var invertValue = !bindValue;
			var invert = invertValue ? 1 : 0;
			var rowId = row[$scope.config.pk];
			var json = {};
			json[fieldName] = invert;
			$http.put($scope.config.apiEndpoint + '/' + rowId +'?ngrestCallType=update&fields='+fieldName, angular.toJson(json, true)).then(function(response) {
				row[fieldName] = invert;
				$scope.highlightItemId(rowId);
				AdminToastService.success(i18nParam('js_ngrest_toggler_success', {field: fieldLabel}), 1500);
			}, function(data) {
				$scope.printErrors(data);
			});
		}
		
		$scope.data = {
			create : {},
			update : {},
			aw : {},
			list : {},
			updateId : 0
		};
	});
	
// activeWindowController.js
	
	zaa.controller("ActiveWindowTagController", function($scope, $http, AdminToastService) {

		$scope.crud = $scope.$parent; // {{ data.aw.itemId }}
		
		$scope.tags = [];
		
		$scope.relation = {};
		
		$scope.newTagName = null;
		
		$scope.loadTags = function() {
			$http.get($scope.crud.getActiveWindowCallbackUrl('LoadTags')).then(function(transport) {
				$scope.tags = transport.data;
			});
		};
		
		$scope.loadRelations = function() {
			$http.get($scope.crud.getActiveWindowCallbackUrl('LoadRelations')).then(function(transport) {
				$scope.relation = {};
				transport.data.forEach(function(value, key) {
					$scope.relation[value.tag_id] = 1;
				});
			});
		};
		
		$scope.saveTag = function() {
			var tagName = $scope.newTagName;

			if (tagName !== "") {
				$scope.crud.sendActiveWindowCallback('SaveTag', {'tagName': tagName}).then(function(response) {
					if (response.data) {
						$scope.tags.push({id: response.data, name: tagName});
						AdminToastService.success(tagName + ' wurde gespeichert.', 2000);
					} else {
						AdminToastService.error(tagName + ' ' + i18n['js_tag_exists'], 2000);
					}
					$scope.newTagName = null;
				});
			}
		};
		
		$scope.saveRelation = function(tag, value) {
			$scope.crud.sendActiveWindowCallback('SaveRelation', {'tagId': tag.id, 'value': value}).then(function(response) {

				$scope.relation[tag.id] = response.data;

				AdminToastService.success(i18n['js_tag_success'], 2000);
			});
		};
		
		$scope.$watch(function() { return $scope.data.aw.itemId }, function(n, o) {
			$scope.loadRelations();
		});
		
		$scope.loadTags();
		
	});
	
	/**
	 * ActiveWindow GalleryController
	 * 
	 * Ability to upload images, removed images from index, add new images via selecting from
	 * filemanager.
	 * 
	 * Changes content when parent crud controller changes value for active aw.itemId.
	 */
	zaa.controller("ActiveWindowGalleryController", function($scope, $http) {
		
		$scope.crud = $scope.$parent; // {{ data.aw.itemId }}
		
		$scope.files = {};
		
		$scope.isEmptyObject = function(files) {
			return angular.equals({}, files);
		};
		
		$scope.select = function(id) {
			if (!(id in $scope.files)) {
				$scope.crud.sendActiveWindowCallback('AddImageToIndex', {'fileId' : id }).then(function(response) {
					var data = response.data;
					$scope.files[data.fileId] = data;
				});
			}
		};
		
		$scope.loadImages = function() {
			$http.get($scope.crud.getActiveWindowCallbackUrl('loadAllImages')).then(function(response) {
				$scope.files = {}
				response.data.forEach(function(value, key) {
					$scope.files[value.fileId] = value;
				});
			})
		};
		
		$scope.remove = function(file) {
			$scope.crud.sendActiveWindowCallback('RemoveFromIndex', {'imageId' : file.id }).then(function(response) {
				delete $scope.files[file.fileId];
			});
		};
		
		$scope.$watch(function() { return $scope.data.aw.itemId }, function(n, o) {
			$scope.loadImages();
		});
		
	});
	
	zaa.controller("ActiveWindowGroupAuth", function($scope, $http, CacheReloadService) {
		
		$scope.crud = $scope.$parent; // {{ data.aw.itemId }}
		
		$scope.reload = function() {
			CacheReloadService.reload();
		};
		
		$scope.rights = [];
		
		$scope.auths = [];
		
		$scope.save = function(data) {
			$scope.crud.sendActiveWindowCallback('saveRights', {'data' : data }).then(function(response) {
				$scope.getRights();
				$scope.reload();
			});
		};
		
		$scope.toggleAll = function() {
			angular.forEach($scope.auths,function(value, key) {
				$scope.rights[value.id] = {base: 1, create: 1, update: 1, 'delete': 1 };
			})
		};
		
		$scope.untoggleAll = function() {
			angular.forEach($scope.auths,function(value, key) {
				$scope.rights[value.id] = {base: 0, create: 0, update: 0, 'delete': 0 };
			})
		};
		
		$scope.getRights = function() {
			$http.get($scope.crud.getActiveWindowCallbackUrl('getRights')).then(function(response) {
				$scope.rights = response.data.rights;
				$scope.auths = response.data.auths;
			})
		};
		
		$scope.$watch(function() { return $scope.data.aw.itemId }, function(n, o) {
			$scope.getRights();
		});
	});
	
// DefaultController.js.
	
	zaa.controller("DefaultController", function ($scope, $http, $state, $stateParams, CrudTabService) {
		
		$scope.moduleId = $state.params.moduleId;
		
		$scope.loadDashboard = function() {
			$scope.currentItem = null;
			return $state.go('default', { 'moduleId' : $scope.moduleId});
		}
		
		$scope.items = [];
		
		$scope.itemRoutes = [];
		
		$scope.currentItem = null;
		
		$scope.dashboard = [];
		
		$scope.itemAdd = function (name, items) {
			
			$scope.items.push({name : name, items : items});
			
			for(var i in items) {
				var data = items[i];
				$scope.itemRoutes[data.route] = {
					alias : data.alias, icon : data.icon
				}
			}
		};
		
		$scope.getDashboard = function(nodeId) {
			$http.get('admin/api-admin-menu/dashboard', { params : { 'nodeId' : nodeId }} ).then(function(data) {
				$scope.dashboard = data.data;
			});
		};
		
		$scope.init = function() {
			$scope.get();
			$scope.getDashboard($scope.moduleId);
		};
		
		$scope.resolveCurrentItem = function() {
			if (!$scope.currentItem) {
				if ($state.current.name == 'default.route' || $state.current.name == 'default.route.detail') {
					var params = [$stateParams.moduleRouteId, $stateParams.controllerId, $stateParams.actionId];
					var route = params.join("/");
					if ($scope.itemRoutes.indexOf(route)) {
						$scope.currentItem = $scope.itemRoutes[route];
						$scope.currentItem.route = route;
					}
				}
			}
		};
		
		$scope.click = function(item) {
			$scope.currentItem = item;
			
			var id = item.route;
			var res = id.split("/");
			CrudTabService.clear();
			
			$state.go('default.route', { moduleRouteId : res[0], controllerId : res[1], actionId : res[2]});
		};
		
		$scope.get = function () {
			$http.get('admin/api-admin-menu/items', { params : { 'nodeId' : $scope.moduleId }} ).then(function(response) {
				var data = response.data;
				for (var itm in data.groups) {
					var grp = data.groups[itm];				
					$scope.itemAdd(grp.name, grp.items);
				}
				$scope.resolveCurrentItem();
			})
		};
		
		$scope.$on('topMenuClick', function(e) {
			$scope.currentItem = null;
		});
		
		$scope.init();
	});
	
	zaa.controller("DashboardController", function ($scope) {
		$scope.logItemOpen = false;
	});
	
	// LayoutMenuController.js
	
	zaa.filter('lockFilter', function() {
		return function(data, table, pk) {
			var has = false;
			angular.forEach(data, function(value) {
				if (value.lock_table == table && value.lock_pk == pk) {
					has = true;
				}
			});
			
			return has;
        };
	});
	
	zaa.controller("LayoutMenuController", function ($scope, $http, $state, $location, $timeout, $window, $filter, CacheReloadService, LuyaLoading, AdminToastService) {
	
		$scope.LuyaLoading = LuyaLoading;
		
		$scope.toastQueue = AdminToastService.queue;
		
		$scope.reload = function() {
			CacheReloadService.reload();
		}
		
		$scope.updateUserProfile = function(profile) {
			$http.post('admin/api-admin-common/change-language', {lang: profile.lang }).then(function(response) {
				$window.location.reload();
			});
		};
	
		$scope.sidePanelUserMenu = false;
		
		$scope.sidePanelHelp = false;
		
		$scope.toggleHelpPanel = function() {
			$scope.sidePanelHelp = !$scope.sidePanelHelp;
			$scope.sidePanelUserMenu = false;
		};
		
		$scope.toggleUserPanel = function() {
			$scope.sidePanelUserMenu = !$scope.sidePanelUserMenu;
			$scope.sidePanelHelp = false;
		};
		
	    $scope.userMenuOpen = false;
	
		$scope.notify = null;
		
		$scope.forceReload = 0;
		
		$scope.showOnlineContainer = false;
		
		$scope.searchDetailClick = function(itemConfig, itemData) {
			if (itemConfig.type == 'custom') {
				$scope.click(itemConfig.menuItem).then(function() {
					if (itemConfig.stateProvider) {
						var params = {};
						angular.forEach(itemConfig.stateProvider.params, function(value, key) {
							params[key] = itemData[value];
						})
						
						$state.go(itemConfig.stateProvider.state, params).then(function() {
							$scope.closeSearchInput();
						})
					} else {
						$scope.closeSearchInput();
					}
				});
				
			} else {
				$scope.click(itemConfig.menuItem.module).then(function() {
					var res = itemConfig.menuItem.route.split("/");
					$state.go('default.route', { moduleRouteId : res[0], controllerId : res[1], actionId : res[2]}).then(function() {
						if (itemConfig.stateProvider) {
							var params = {};
							angular.forEach(itemConfig.stateProvider.params, function(value, key) {
								params[key] = itemData[value];
							})
							$state.go(itemConfig.stateProvider.state, params).then(function() {
								$scope.closeSearchInput();
							})
						} else {
							$scope.closeSearchInput();
						}
					})
				});
			}
		};
		
		(function tick(){
			$http.get('admin/api-admin-timestamp', { ignoreLoadingBar: true }).then(function(response) {
				$scope.forceReload = response.data.forceReload;
				if ($scope.forceReload) {
					AdminToastService.confirm(i18n['js_admin_reload'], function($timeout, $toast) {
						$scope.reload();
					});
				}
				
				$scope.locked = response.data.locked;
				$scope.notify = response.data.useronline;
				$timeout(tick, 20000);
			})
		})();
		
		$scope.isLocked = function(table, pk) {
			return $filter('lockFilter')($scope.locked, table, pk);
		}
		
		$scope.searchQuery = null;
	
	    $scope.searchInputOpen = false;
	
	    $scope.escapeSearchInput = function() {
	        if( $scope.searchInputOpen ) {
	            $scope.closeSearchInput();
	        }
	    };
	
	    $scope.openSearchInput = function() {
	        $scope.searchInputOpen = true;
	    };
	
	    $scope.closeSearchInput = function() {
	        $scope.searchInputOpen = false;
	    };
		
		$scope.searchResponse = null;
		
		$scope.searchPromise = null;
	
		$scope.$watch(function() { return $scope.searchQuery}, function(n, o) {
			if (n !== o) {
				if (n.length > 2) {
					$timeout.cancel($scope.searchPromise);
					$scope.searchPromise = $timeout(function() {
						$http.get('admin/api-admin-search', { params : { query : n}}).then(function(response) {
							$scope.searchResponse = response.data;
						})
					}, 1000)
				} else {
	                $scope.searchResponse = null;
				}
			}
		});
		
		$scope.items = [];
		
		$scope.currentItem = {};
		
		$scope.click = function(menuItem) {
			$scope.mobileOpen = false;
			$scope.$broadcast('topMenuClick', { menuItem : menuItem });
			if (menuItem.template) {
				return $state.go('custom', { 'templateId' : menuItem.template });
			} else {
				return $state.go('default', { 'moduleId' : menuItem.id});
			}
		};
		
		$scope.isActive = function(item) {
			if (item.template) {
				if ($state.params.templateId == item.template) {
					$scope.currentItem = item;
					return true;
				}
			} else {
				if ($state.params.moduleId == item.id) {
					$scope.currentItem = item;
					return true;
				}
			}
		};
		
		$scope.get = function () {
			$http.get('admin/api-admin-menu').then(function(response) {
				$scope.items = response.data;
			});
		};
		
		$scope.get();
	});

})();
(function() {
    "use strict";

    zaa.directive("crudLoader", function($http, $sce) {
    	return {
    		restrict: "E",
    		replace: true,
    		transclude: false,
    		scope: {
    			"api": "@api",
    		},
    		controller: function($scope) {

    			$scope.showWindow = false;

    			$scope.content = null;

    			$scope.toggleWindow = function() {
    				if (!$scope.showWindow) {
    					$http.get($scope.api+'/?inline=1').then(function(response) {
    						$scope.content = $sce.trustAsHtml(response.data);
    						$scope.showWindow = true;
    					})
    				} else {
    					$scope.$parent.loadService();
    					$scope.showWindow = false;
    				}
    			}
    		},
    		template: function() {
    			return '<div class="crud-loader-tag"><button ng-click="toggleWindow()" type="button" class="btn btn-floating green lighten-1"><i class="material-icons">playlist_add</i></button><div ng-show="showWindow" class="modal__wrapper"><div class="modal"><button class="btn waves-effect waves-light modal__close btn-floating red" type="button" ng-click="toggleWindow()"><i class="material-icons">close</i></button><div class="modal-content" compile-html ng-bind-html="content"></div></div><div class="modal__background"></div></div></div>';
    		}
    	}
    });
    
    zaa.directive("crudRelationLoader", function($http, $sce) {
    	return {
    		restrict: "E",
    		replace: true,
    		transclude: false,
    		scope: {
    			"api": "@api",
    			"arrayIndex": "@arrayIndex",
    			"modelClass" : "@modelClass",
    			"id": "@id",
    		},
    		controller: function($scope) {
    			$scope.content = null;
    			$http.get($scope.api+'/?inline=1&relation='+$scope.id+'&arrayIndex='+$scope.arrayIndex+'&modelClass='+$scope.modelClass).then(function(response) {
					$scope.content = $sce.trustAsHtml(response.data);
    			});
    		},
    		template: function() {
    			return '<div compile-html ng-bind-html="content"></div>';
    		}
    	}
    })

    // form.js

    zaa.directive("zaaInjector", function($compile) {
        return {
            restrict: "E",
            replace: true,
            transclude: false,
            scope: {
                "dir": "=",
                "model": "=",
                "options": "=",
                "label": "@label",
                "grid": "@grid",
                "fieldid": "@fieldid",
                "fieldname": "@fieldname",
                "placeholder": "@placeholder",
                "initvalue": "@initvalue"
            },
            link: function($scope, $element) {
                var elmn = $compile(angular.element('<' + $scope.dir + ' options="options" initvalue="{{initvalue}}" fieldid="{{fieldid}}" fieldname="{{fieldname}}" placeholder="{{placeholder}}" model="model" label="{{label}}" i18n="{{grid}}" />'))($scope);
                $element.replaceWith(elmn);
            },
        }
    });

    /**
     * @var object $model Contains existing data for the displaying the existing relations
     *
     * ```js
     * [
     * 	{'sortpos': 1, 'value': 1},
     *  {'sortpos': 2, 'value': 4},
     * ]
     * ```
     *
     * @var object $options Provides options to build the sort relation array:
     *
     * ```js
     * {
     * 	'sourceData': [
     * 		{'value': 1, 'label': 'Source Entry #1'}
     * 		{'value': 2, 'label': 'Source Entry #2'}
     * 		{'value': 3, 'label': 'Source Entry #3'}
     * 		{'value': 4, 'label': 'Source Entry #4'}
     * 	]
     * }
     * ```
     */
    zaa.directive("zaaSortRelationArray", function() {
    	return {
    		restrict: "E",
    		scope: {
    			"model": "=",
    			"options": "=",
    			"label": "@label",
    			"i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname",
    		},
    		controller: function($scope, $filter) {

    			$scope.searchString = null;

    			$scope.sourceData = [];

                $scope.dropdownOpen = false;

    			$scope.$watch(function() { return $scope.model }, function(n, o) {
    				if (n == undefined) {
    					$scope.model = [];
    				}
    			});

    			$scope.$watch(function() { return $scope.options }, function(n, o) {
    				if (n !== undefined && n !== null) {
    					$scope.sourceData = n.sourceData;
    				}
    			})

    			$scope.getSourceOptions = function() {
    				return $scope.sourceData;
    			};

    			$scope.getModelItems = function() {
    				return $scope.model;
    			}

    			$scope.addToModel = function(option) {

    				var match = false;

    				angular.forEach($scope.model, function(value, key) {
    					if (value.value == option.value) {
    						match = true;
    					}
    				})

    				if (!match) {
    					$scope.searchString = null;
    					$scope.model.push({'value': option.value, 'label': option.label});
    				}
    			};

    			$scope.removeFromModel = function(key) {
    				$scope.model.splice(key, 1);
    			}

    			$scope.moveUp = function(index) {
                    index = parseInt(index);
                    var oldRow = $scope.model[index];
                    $scope.model[index] = $scope.model[index-1];
                    $scope.model[index-1] = oldRow;
                }

                $scope.moveDown = function(index) {
                    index = parseInt(index);
                    var oldRow = $scope.model[index];
                    $scope.model[index] = $scope.model[index+1];
                    $scope.model[index+1] = oldRow;
                };

                $scope.showDownButton = function(index) {
                    if (parseInt(index) < Object.keys($scope.model).length - 1) {
                        return true;
                    }
                    return false;
                }

                $scope.elementInModel = function(item) {
            		var match = false;

    				angular.forEach($scope.model, function(value, key) {
    					if (value.value == item.value) {
    						match = true;
    					}
    				});

    				return !match;
                }
    		},
    		template: function() {
    			return '<div class="input input--sortrelation" ng-class="{\'input--hide-label\': i18n}">' +
                    '<label class="input__label" for="{{id}}">{{label}}</label>' +
                    '<div class="input__field-wrapper">' +
                        '<div class="zaa-sortrelation">' +
                            '<ul class="zaa-sortrelation__list>">' +
                                '<li class="zaa-sortrelation__entry" ng-repeat="(key, item) in getModelItems() track by key">' +
                                    '<div class="zaa-sortrelation__arrows">' +
                                        '<i ng-show="{{key > 0}}" ng-click="moveUp(key)" class="material-icons" style="transform: rotate(270deg);">play_arrow</i>' +
                                        '<i ng-show="showDownButton(key)" ng-click="moveDown(key)" class="material-icons" style="transform: rotate(90deg);">play_arrow</i>' +
                                    '</div>' +

                                    '<span class="zaa-sortrelation__text">{{item.label}}</span>' +

                                    '<div class="zaa-sortrelation__trash">' +
                                        '<i ng-click="removeFromModel(key)" class="material-icons">delete</i>' +
                                    '</div>' +
                                '</li>' +
                                '<li class="zaa-sortrelation__dropdown-filter" ng-class="{\'zaa-sortrelation__dropdown-filter--open\': dropdownOpen}">' +
                                    '<input class="zaa-sortrelation__filter" type="search" ng-model="searchString" placeholder="Hinzufügen..." ng-focus="dropdownOpen = true" />' +
                                    '<ul class="zaa-sortrelation__dropdown">' +
                                        '<li class="zaa-sortrelation__dropdown-entry" ng-repeat="option in getSourceOptions() | filter:searchString" ng-show="dropdownOpen && elementInModel(option)" ng-click="addToModel(option)">' +
                                            '<i class="material-icons">add_circle</i><span>{{ option.label }}</span>' +
                                        '</li>' +
                                    '</ul>' +
                                    '<div class="zaa-sortrelation__dropdown-arrow" ng-class="{\'zaa-sortrelation__dropdown-arrow--active\': dropdownOpen}">' +
                                        '<i ng-click="dropdownOpen = !dropdownOpen" class="material-icons">arrow_drop_down</i>' +
                                    '</div>' +
                                '</li>' +
                            '</ul>' +
                        '</div>' +
                    '</div>';
    		}
    	}
    });

    zaa.directive("zaaLink", function(){
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname",
            },
            controller: function($scope) {
            	$scope.unset = function() {
            		$scope.model = null;
            		$scope.data.model = null;
            	}
            	
            	$scope.data = {
            		modalState: 1,
            		model: null
            	};
            	
            	$scope.$watch('model', function(n, o) {
            		if (n) {
            			$scope.data.model = n;
            		}
            	}, true);
            	
            	$scope.$watch('data.model', function(n, o) {
            		if (n) {
            			$scope.model = n;
            		}
            	}, true);
            },
            template: function() {
                return '<div class="input input--text" ng-class="{\'input--hide-label\': i18n}"><label class="input__label" for="{{id}}">{{label}}</label><div class="input__field-wrapper">' +
                    '<div ng-if="model">' +
                        '<div class="link-selector">' +
                            '<div class="link-selector__btn btn-flat [ grey lighten-4 ]" ng-click="data.modalState=0">' +
                                '<i class="material-icons left">insert_link</i>' +
                                '<span>'+i18n['js_link_change_value']+'</span>' +
                            '</div>' +
                            '<span class="link-selector__reset" ng-click="unset()"><i class="material-icons">remove_circle</i></span>' +
                            '<span class="link-selector__path"><link-object-to-string link="model"></link-object-to-string></span>' +
                        '</div>' +
                    '</div>' +
                    '<div ng-if="!model">' +
                        '<div class="link-selector">' +
                            '<div class="link-selector__btn btn-flat [ grey lighten-4 ]" ng-click="data.modalState=0">' +
                                '<i class="material-icons left">insert_link</i>' +
                                '<span>'+i18n['js_link_set_value']+'</span>' +
                            '</div>' +
                            '<span class="link-selector__path">Kein Link gesetzt</span>' +
                        '</div>' +
                    '</div>' +
                    '<modal is-modal-hidden="data.modalState">'+
                        '<update-form-redirect data="data.model"></update-form-redirect>'+
                        '<button ng-click="unset(); data.modalState=1" type="button" class="btn red"><i class="material-icons">cancel</i></button> '+
                        '<button ng-click="data.modalState=1" class="btn" type="button"><i class="material-icons">check</i> '+i18n['js_link_set_value']+'</button>'+
                    '</modal>'+
                '</div></div>';
            }
        }
    });

    zaa.directive("zaaSlug", function() {
    	return {
    		restrict: "E",
    		scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname",
            },
    		controller: function($scope, Slug) {
    			$scope.$watch(function() { return $scope.model; }, function(n, o) {
    				if (n!=o) {
    					$scope.model = Slug.slugify(n);
    				}
    			});
    		},
    		template:function() {
                return '<div class="input input--text" ng-class="{\'input--hide-label\': i18n}"><label class="input__label" for="{{id}}">{{label}}</label><div class="input__field-wrapper"><input id="{{id}}" insert-paste-listener maxlength="255" name="{{name}}" ng-model="model" type="text" class="input__field" placeholder="{{placeholder}}" /></div></div>';
    		}
    	}
    });
    
    zaa.directive("zaaWysiwyg", function() {
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname"
            },
            template: function() {
                return '<ng-wig ng-disabled="false" ng-model="model" buttons="bold, italic, link, list1, list2" name="{{name}}"></ng-wig>';
            }
        }
    });

    zaa.directive("zaaNumber", function() {
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname",
                "placeholder": "@placeholder",
                "initvalue" : "@initvalue"
            }, link: function($scope) {
                $scope.$watch(function() { return $scope.model }, function(n, o) {
                	if (n == undefined) {
                		$scope.model = parseInt($scope.initvalue);
                	}
                    if(angular.isNumber($scope.model)) {
                        $scope.isValid = true;
                    } else {
                        $scope.isValid = false;
                    }
                })
            }, template: function() {
                return '<div class="input input--text" ng-class="{\'input--hide-label\': i18n}"><label class="input__label" for="{{id}}">{{label}}</label><div class="input__field-wrapper"><input id="{{id}}" name="{{name}}" ng-model="model" type="number" min="0" class="input__field" ng-class="{\'invalid\' : !isValid }" placeholder="{{placeholder}}" /></div></div>';
            }
        }
    });

    zaa.directive("zaaDecimal", function() {
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname",
                "placeholder": "@placeholder"
            }, controller: function($scope) {
                if ($scope.options === null) {
                    $scope.steps = 0.01;
                } else {
                    $scope.steps = $scope.options['steps'];
                }
            }, link: function($scope) {
                $scope.$watch(function() { return $scope.model }, function(n, o) {
                    if(angular.isNumber($scope.model)) {
                        $scope.isValid = true;
                    } else {
                        $scope.isValid = false;
                    }
                })
            }, template: function() {
                return '<div class="input input--text" ng-class="{\'input--hide-label\': i18n}"><label class="input__label" for="{{id}}">{{label}}</label><div class="input__field-wrapper"><input id="{{id}}" name="{{name}}" ng-model="model" type="number" min="0" step="{{steps}}" class="input__field" ng-class="{\'invalid\' : !isValid }" placeholder="{{placeholder}}" /></div></div>';
            }
        }
    });

    zaa.directive("zaaText", function(){
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname",
                "placeholder": "@placeholder"
            },
            template: function() {
                return '<div class="input input--text" ng-class="{\'input--hide-label\': i18n}"><label class="input__label" for="{{id}}">{{label}}</label><div class="input__field-wrapper"><input id="{{id}}" insert-paste-listener maxlength="255" name="{{name}}" ng-model="model" type="text" class="input__field" placeholder="{{placeholder}}" /></div></div>';
            }
        }
    });

    zaa.directive("zaaTextarea", function(){
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname",
                "placeholder": "@placeholder"
            },
            /*
            link : function(scope, element) {
            	var e = element.find('textarea')[0];
            	var h = angular.element(e).height();
            	var recalc = function(e, h) {
            		if (e.scrollHeight > h) {
            			e.style.height = (e.scrollHeight) + "px";
            		}
            	}
            	scope.$watch('model', function(n, o) {
            		recalc(e, h);
            	});
            	recalc(e, h);
            },
            */
            template: function() {
                return '<div class="input input--textarea" ng-class="{\'input--hide-label\': i18n}"><label class="input__label" for="{{id}}">{{label}}</label><div class="input__field-wrapper"><textarea id="{{id}}" insert-paste-listener name="{{name}}" ng-model="model" type="text" class="input__field" auto-grow placeholder="{{placeholder}}"></textarea></div></div>';
            }
        }
    });

    zaa.directive("zaaPassword", function(){
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname"
            },
            template: function() {
                return '<div class="input input--text" ng-class="{\'input--hide-label\': i18n}"><label class="input__label" for="{{id}}">{{label}}</label><div class="input__field-wrapper"><input id="{{id}}" name="{{name}}" ng-model="model" type="password" class="input__field" placeholder="{{placeholder}}" /></div></div>';
            }
        }
    });

    /**
     * options=[{"value":123,"label":123-Label}, {"value":abc,"label":ABC-Label}]
     */
    zaa.directive("zaaSelect", function($timeout){
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname",
                "initvalue": "@initvalue"
            },
            link: function(scope) {
		    
		if(jQuery.isNumeric(scope.model)){
			scope.model = typeCastValue(scope.model);
		}
		    
                $timeout(function(){
                    scope.$watch(function() { return scope.model }, function(n, o) {
                        if (n == undefined || n == null || n == '') {
                            if (jQuery.isNumeric(scope.initvalue)) {
                                scope.initvalue = typeCastValue(scope.initvalue);
                            }
                            scope.model = scope.initvalue;
                        }
                    })
                });
            },
            template: function() {
                return '<div class="input input--select" ng-class="{\'input--hide-label\': i18n}">' +
                            '<label class="input__label" for="{{id}}">{{label}}</label>' +
                            '<div class="input__select-wrapper">' +
                                '<select name="{{name}}" id="{{id}}" class="input__field browser-default" chosen allow-single-deselect="true" width="\'100%\'" placeholder-text-single="\'' + i18n['ngrest_select_no_selection']+ '\'" ng-options="item.value as item.label for item in options" ng-model="model"><option></option></select>' +
                            '</div>' +
                        '</div>';
            }
        }
    });

    /**
     * options = {'true-value' : 1, 'false-value' : 0};
     */
    zaa.directive("zaaCheckbox", function($timeout) {
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname",
                "label": "@label",
                "initvalue": "@initvalue"
            },
            controller: function($scope) {
                if ($scope.options === null) {
                    $scope.valueTrue = 1;
                    $scope.valueFalse = 0;
                } else {
                    $scope.valueTrue = $scope.options['true-value'];
                    $scope.valueFalse = $scope.options['false-value'];
                }

                $scope.init = function() {
            		if ($scope.model == undefined && $scope.model == null) {
            			$scope.model = typeCastValue($scope.initvalue);
            		}
                };
                $timeout(function() {
                	$scope.init();
            	})
            },
            template: function() {
                return '<div class="input input--single-checkbox">' +
                            '<input id="{{id}}" name="{{name}}" ng-true-value="{{valueTrue}}" ng-false-value="{{valueFalse}}" ng-model="model" type="checkbox" />' +
                            '<label for="{{id}}" class="input__label">{{label}}</label>' +
                        '</div>';
            }
        }
    });

    /**
     * options arg object:
     *
     * options.items[] = [{"value" : 1, "label" => 'Label for Value 1' }]
     */
    zaa.directive("zaaCheckboxArray", function(){
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname",
                "label": "@label"
            },
            controller: function($scope, $filter) {

                if ($scope.model == undefined) {
                    $scope.model = [];
                }

                $scope.searchString = '';

                $scope.$watch('options', function(n, o) {
                	if (n != undefined && n.hasOwnProperty('items')) {
                    	$scope.optionitems = $filter('orderBy')(n.items, 'label');
                    }
                });

                $scope.filtering = function() {
                    $scope.optionitems = $filter('filter')($scope.options.items, $scope.searchString);
                }

                $scope.toggleSelection = function (value) {
                	if ($scope.model == undefined) {
                		$scope.model = [];
                	}

                    for (var i in $scope.model) {
                        if ($scope.model[i]["value"] == value.value) {
                            $scope.model.splice(i, 1);
                            return;
                        }
                    }
                    $scope.model.push({'value': value.value});
                }

                $scope.isChecked = function(item) {
                    for (var i in $scope.model) {
                        if ($scope.model[i]["value"] == item.value) {
                            return true;
                        }
                    }
                    return false;
                }
            },
            link: function(scope) {
                scope.random = Math.random().toString(36).substring(7);
            },
            template: function() {
                return '<div class="input input--multiple-checkboxes"  ng-class="{\'input--hide-label\': i18n}">' +
                            '<label class="input__label">{{label}}</label>' +
                            '<div class="input__field-wrapper">' +
                                '<input class="input__searchfield" type="text" ng-change="filtering()" ng-model="searchString" placeholder="Suchen" /> {{optionitems.length}} ' + i18n['js_dir_till'] + '{{options.items.length}}'+
                                '<div ng-repeat="(k, item) in optionitems track by k">' +
                                    '<input type="checkbox" ng-checked="isChecked(item)" id="{{random}}_{{k}}" ng-click="toggleSelection(item)" />' +
                                    '<label for="{{random}}_{{k}}">{{item.label}}</label>' +
                                '</div>' +
                            '</div>' +
                        '</div>';
            }
        }
    });

    /**
     * https://github.com/720kb/angular-datepicker#date-validation - Date Picker
     * http://jsfiddle.net/bateast/Q6py9/1/ - Date Parse
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date - Date Objects
     * https://docs.angularjs.org/api/ng/filter/date - Angular Date Filter
     */
    zaa.directive("zaaDatetime", function() {
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "id": "@fieldid",
                "name": "@fieldname",
                "i18n": "@i18n"
            },
            controller: function($scope, $filter) {

            	$scope.isNumeric = function(num) {
            	    return !isNaN(num)
            	}
            	
            	$scope.$watch(function() { return $scope.model }, function(n, o) {
            		if (n != null && n != undefined) {
            			var datep = new Date(n*1000);
            			$scope.pickerPreselect = datep;
            			$scope.date = $filter('date')(datep, 'dd.MM.yyyy');
            			$scope.hour = $filter('date')(datep, 'H');
            			$scope.min = $filter('date')(datep, 'm');
            		} else {
            			$scope.date = null;
            			$scope.model = null;
            		}
            	});

            	$scope.refactor = function(n) {
            		if (!$scope.isNumeric($scope.hour) || $scope.hour == '') {
						$scope.hour = "0";
					}
					
					if (!$scope.isNumeric($scope.min)  || $scope.min == '') {
						$scope.min = "0";
					}
            		
            		if (n == 'Invalid Date' || n == "" || n == 'NaN') {
        				$scope.date = null;
        				$scope.model = null;
        			} else {
            			var res = n.split(".");
            			if (res.length == 3) {
            				if (res[2].length == 4) {

        						if (parseInt($scope.hour) > 23) {
        							$scope.hour = 23;
        						}

        						if (parseInt($scope.min) > 59) {
        							$scope.min = 59;
        						}

		        				var en = res[1] + "/" + res[0] + "/" + res[2] + " " + $scope.hour + ":" + $scope.min;
		        				$scope.model = (Date.parse(en)/1000);
		        				$scope.datePickerToggler = false;
            				}
            			}
        			}
            	}

            	$scope.$watch(function() { return $scope.date }, function(n, o) {
            		if (n != o && n != undefined && n != null) {
            			$scope.refactor(n);
            		}
            	});

            	$scope.autoRefactor = function() {
            		$scope.refactor($scope.date);
            	}

            	$scope.datePickerToggler = false;

            	$scope.toggleDatePicker = function() {
            		$scope.datePickerToggler = !$scope.datePickerToggler;
            	}


            	$scope.hour = "0";

            	$scope.min = "0";

            },
            template: function() {
            	return '<div class="input input--date" ng-class="{\'input--hide-label\': i18n, \'input--with-time\': model!=null && date!=null}"><label class="input__label">{{label}}</label><div class="input__field-wrapper"><datepicker date-set="{{pickerPreselect.toString()}}" datepicker-toggle="false" datepicker-show="{{datePickerToggler}}" date-format="dd.MM.yyyy"><input ng-model="date" type="text" class="input__field" /><span class="btn btn-floating date-picker-icon" ng-class="{\'red\': datePickerToggler}" ng-click="toggleDatePicker()"><i class="material-icons" ng-hide="datePickerToggler">date_range</i><i class="material-icons" style="margin-top: 1px;" ng-show="datePickerToggler">close</i></span></datepicker>'+
            	'<div ng-show="model!=null && date!=null" class="hour-selection"><span class="hour-selection__icon"><i class="material-icons">access_time</i></span><input type="text" ng-model="hour" ng-change="autoRefactor()" class="input__field input__field--hour" /><span class="time-divider">:</span><input type="text" ng-model="min" ng-change="autoRefactor()" class="input__field input__field--minute" /></div>'
            	'</div></div></div>';
            }
        }
    });

    zaa.directive("zaaDate", function() {
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "id": "@fieldid",
                "name": "@fieldname",
                "i18n": "@i18n"
            },
        	controller: function($scope, $filter) {

            	$scope.$watch(function() { return $scope.model }, function(n, o) {
            		
            		if (n != null && n != undefined) {
            			var datep = new Date(n*1000);
            			$scope.pickerPreselect = datep;
            			$scope.date = $filter('date')(datep, 'dd.MM.yyyy');
            		} else {
            			$scope.date = null;
            			$scope.model = null;
            		}
            	});

            	$scope.refactor = function(n) {
            		if (n == 'Invalid Date' || n == "") {
        				$scope.date = null;
        				$scope.model = null;
        			} else {
            			var res = n.split(".");
            			if (res.length == 3) {
            				if (res[2].length == 4) {
            					var en = res[1] + "/" + res[0] + "/" + res[2];
		        				$scope.model = (Date.parse(en)/1000);
		        				$scope.datePickerToggler = false;
            				}
            			}
        			}
            	}

            	$scope.$watch(function() { return $scope.date }, function(n, o) {
            		if (n != o && n != undefined && n != null) {
            			$scope.refactor(n);
            		}
            	});

            	$scope.autoRefactor = function() {
            		$scope.refactor($scope.date);
            	}

            	$scope.datePickerToggler = false;

            	$scope.toggleDatePicker = function() {
            		$scope.datePickerToggler = !$scope.datePickerToggler;
            	}

            },
            template: function() {
            	return '<div class="input input--date"  ng-class="{\'input--hide-label\': i18n}"><label class="input__label">{{label}}</label><div class="input__field-wrapper"><datepicker date-set="{{pickerPreselect.toString()}}" datepicker-toggle="false" datepicker-show="{{datePickerToggler}}" date-format="dd.MM.yyyy"><input ng-model="date" type="text" class="input__field" /><span class="btn btn-floating date-picker-icon" ng-class="{\'red\': datePickerToggler}" ng-click="toggleDatePicker()"><i class="material-icons" ng-hide="datePickerToggler">date_range</i><i class="material-icons" style="margin-top: 1px;" ng-show="datePickerToggler">close</i></span></datepicker></div></div></div>';
            }
        }
    });

    zaa.directive("zaaTable", function() {
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname"
            },
            controller: function($scope) {

                if ($scope.model == undefined) {
                    $scope.model = [{0:''}];
                }

                $scope.addColumn = function() {
                    var len = 0;
                    for (var o in $scope.model[0]) {
                        len++;
                    }

                    for(var i in $scope.model) {
                         $scope.model[i][len] = '';
                    }
                }

                $scope.addRow = function() {
                    var elmn = $scope.model[0];
                    var ins = {};
                    for (var i in elmn) {
                        ins[i] = '';
                    }

                    $scope.model.push(ins);
                }

                $scope.removeColumn = function(key) {
                    for (var i in $scope.model) {
                        var item = $scope.model[i];
                        if(item instanceof Array) {
                            item.splice(key, 1);
                        } else {
                            delete item[key];
                        }
                    }
                }

                $scope.moveLeft = function(index) {
                    index = parseInt(index);
                    for (var i in $scope.model) {
                        var oldValue = $scope.model[i][index];
                        $scope.model[i][index] = $scope.model[i][index-1];
                        $scope.model[i][index-1] = oldValue;
                    }
                }

                $scope.moveRight = function(index) {
                    index = parseInt(index);
                    for (var i in $scope.model) {
                        var oldValue = $scope.model[i][index];
                        $scope.model[i][index] = $scope.model[i][index+1];
                        $scope.model[i][index+1] = oldValue;
                    }
                }

                $scope.moveUp = function(index) {
                    index = parseInt(index);
                    var oldRow = $scope.model[index];
                    $scope.model[index] = $scope.model[index-1];
                    $scope.model[index-1] = oldRow;
                }

                $scope.moveDown = function(index) {
                    index = parseInt(index);
                    var oldRow = $scope.model[index];
                    $scope.model[index] = $scope.model[index+1];
                    $scope.model[index+1] = oldRow;
                }

                $scope.removeRow = function(key) {
                    $scope.model.splice(key, 1);
                }

                $scope.showRightButton = function(index) {
                    if (parseInt(index) < Object.keys($scope.model[0]).length - 1) {
                        return true;
                    }
                    return false;
                }
                $scope.showDownButton = function(index) {
                    if (parseInt(index) < Object.keys($scope.model).length - 1) {
                        return true;
                    }
                    return false;
                }
            },
            template: function() {
                return '<div class="zaa-table__wrapper">'+
                            '<h5 ng-show="label">{{label}}</h5>' +
                            '<table class="zaa-table">'+
                                '<thead>'+
                                    '<tr>'+
                                        '<td width="30"></td>'+
                                        '<td data-ng-repeat="(hk, hr) in model[0] track by hk">'+
                                            '<div class="zaa-table__cell-toolbar-top">'+
                                                '<button type="button" ng-show="{{hk > 0}}" ng-click="moveLeft(hk)" class="btn zaa-table__btn zaa-table__btn--cellmove zaa-table__btn--cellmove-left" tabindex="-1"><i class="material-icons" style="transform: rotate(180deg);">play_arrow</i></button>' +
                                                '<div class="zaa-table__cell-toolbar-center">'+
                                                    '<button type="button" ng-click="removeColumn(hk)" class="btn-floating zaa-table__btn zaa-table__btn--del" data-drag="true" tabindex="-1">'+
                                                        '<i class="material-icons">delete</i>'+
                                                    '</button>'+
                                                '</div>'+
                                                '<button type="button" ng-click="moveRight(hk)" ng-show="showRightButton(hk)" class="btn zaa-table__btn zaa-table__btn--cellmove zaa-table__btn--cellmove-right" tabindex="-1"><i class="material-icons">play_arrow</i></button>' +
                                            '</div>'+
                                        '</td>'+
                                    '</tr>'+
                                '</thead>' +
                                '<tr data-ng-repeat="(key, row) in model track by key">'+
                                    '<td>'+
                                        '<button type="button" class="btn-floating zaa-table__btn zaa-table__btn--del" ng-click="removeRow(key)" tabindex="-1">'+
                                            '<i class="material-icons">delete</i>'+
                                        '</button>'+
                                        '<div class="zaa-table__cell-toolbar-side">'+
                                            '<button type="button" ng-show="{{key > 0}}" ng-click="moveUp(key)" class="btn zaa-table__btn zaa-table__btn--cellmove zaa-table__btn zaa-table__btn--cellmove-top" tabindex="-1"><i class="material-icons" style="transform: rotate(270deg);">play_arrow</i></button>' +
                                            '<button type="button" ng-show="showDownButton(key)" ng-click="moveDown(key)" class="btn zaa-table__btn zaa-table__btn--cellmove zaa-table__btn zaa-table__btn--cellmove-bottom" tabindex="-1"><i class="material-icons" style="transform: rotate(90deg);">play_arrow</i></button><br/>' +
                                        '</div>'+
                                    '</td>'+
                                    '<td data-ng-repeat="(field,value) in row track by field">'+
                                        '<textarea ng-model="model[key][field]" class="zaa-table__textarea"></textarea>'+
                                    '</td>'+
                                '</tr>'+
                            '</table>'+
                            '<button ng-click="addRow()" type="button" class="[ waves-effect waves-light ] btn btn--small">'+i18n['js_dir_table_add_row']+' <i class="material-icons right">add</i></button>'+
                            '<button ng-click="addColumn()" type="button" style="float:right;" class="[ waves-effect waves-light ] btn btn--small">'+i18n['js_dir_table_add_column']+' <i class="material-icons right">add</i></button>'+
                        '</div>';
            }
        }
    });

    zaa.directive("zaaFileUpload", function($compile){
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname"
            },
            template: function() {
                return '<div class="input input--file-upload" ng-class="{\'input--hide-label\': i18n}">' +
                            '<label class="input__label">{{label}}</label>' +
                            '<div class="input__field-wrapper">' +
                                '<storage-file-upload ng-model="model"></storage-file-upload>' +
                            '</div>' +
                        '</div>';
            }
        }
    });

    zaa.directive("zaaImageUpload", function($compile){
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname"
            },
            template: function() {
                return '<div class="input input--image-upload" ng-class="{\'input--hide-label\': i18n}">' +
                            '<label class="input__label">{{label}}</label>' +
                            '<div class="input__field-wrapper">' +
                                '<storage-image-upload options="options" ng-model="model"></storage-image-upload>' +
                            '</div>' +
                        '</div>';
            }
        }
    });

    zaa.directive("zaaImageArrayUpload", function(){
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname"
            },
            controller: function($scope) {

                if ($scope.model == undefined) {
                    $scope.model = [];
                }

                $scope.add = function() {
                	if ($scope.model == null || $scope.model == '' || $scope.model == undefined) {
                		$scope.model = [];
                	}
                    $scope.model.push({ imageId : 0, caption : '' });
                };

                $scope.remove = function(key) {
                    $scope.model.splice(key, 1);
                };

                $scope.moveUp = function(index) {
                    index = parseInt(index);
                    var oldRow = $scope.model[index];
                    $scope.model[index] = $scope.model[index-1];
                    $scope.model[index-1] = oldRow;
                };

                $scope.moveDown = function(index) {
                    index = parseInt(index);
                    var oldRow = $scope.model[index];
                    $scope.model[index] = $scope.model[index+1];
                    $scope.model[index+1] = oldRow;
                };

                $scope.showDownButton = function(index) {
                    if (parseInt(index) < Object.keys($scope.model).length - 1) {
                        return true;
                    }
                    return false;
                };
            },
            template: function() {
                return '<div class="input input--image-array imagearray" ng-class="{\'input--hide-label\': i18n}">' +
                            '<label class="input__label">{{label}}</label>' +
                            '<div class="input__field-wrapper">' +
                                '<p class="list__no-entry" ng-hide="model.length > 0">'+i18n['js_dir_no_selection']+'</p>' +
                                '<div ng-repeat="(key,image) in model track by key" class="row list__item">' +

                                    '<div class="list__left row">' +
                                        '<div class="col s8">' +
                                            '<storage-image-upload ng-model="image.imageId" options="options"></storage-image-upload>' +
                                        '</div>' +
                                        '<div class="input-field col s4">' +
                                            '<textarea ng-model="image.caption" class="materialize-textarea"></textarea>' +
                                            '<label>'+i18n['js_dir_image_description']+'</label>' +
                                        '</div>' +
                                    '</div>' +
                                    '<div class="list__right">' +
                                        '<button type="button" class="btn-floating list__button [ blue lighten-1 ]" ng-click="moveUp(key)" ng-show="{{key > 0}}"><i class="material-icons">keyboard_arrow_up</i></button>' +
                                        '<button type="button" class="btn-floating list__button [ blue lighten-1 ]" ng-click="moveDown(key)" ng-show="showDownButton(key)"><i class="material-icons">keyboard_arrow_down</i></button>' +
                                        '<button type="button" class="btn-floating list__button [ red lighten-1 ]" ng-click="remove(key)" tabindex="-1"><i class="material-icons">remove</i></button>' +
                                    '</div>' +
                                '</div>' +
                                '<button ng-click="add()" type="button" class="btn-floating left list__add-button [ waves-effect waves-circle waves-light ]"><i class="material-icons">add</i></button>' +
                            '</div>' +
                        '</div>';
            }
        }
    });

    zaa.directive("zaaFileArrayUpload", function(){
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname"
            },
            controller: function($scope, $element, $timeout) {

                if ($scope.model == undefined) {
                    $scope.model = [];
                }

                $scope.add = function() {
                	if ($scope.model == null || $scope.model == '' || $scope.model == undefined) {
                		$scope.model = [];
                	}
                    $scope.model.push({ fileId : 0, caption : '' });
                };

                $scope.remove = function(key) {
                    $scope.model.splice(key, 1);
                };

                $scope.moveUp = function(index) {
                    index = parseInt(index);
                    var oldRow = $scope.model[index];
                    $scope.model[index] = $scope.model[index-1];
                    $scope.model[index-1] = oldRow;
                };

                $scope.moveDown = function(index) {
                    index = parseInt(index);
                    var oldRow = $scope.model[index];
                    $scope.model[index] = $scope.model[index+1];
                    $scope.model[index+1] = oldRow;
                };

                $scope.showDownButton = function(index) {
                    if (parseInt(index) < Object.keys($scope.model).length - 1) {
                        return true;
                    }
                    return false;
                };
            },
            template: function() {
                return '<div class="input input--file-array filearray" ng-class="{\'input--hide-label\': i18n}">' +
                            '<label class="input__label">{{label}}</label>' +
                            '<div class="input__field-wrapper">' +
                                '<p class="list__no-entry" ng-hide="model.length > 0">'+i18n['js_dir_no_selection']+'</p>' +
                                '<div ng-repeat="(key,file) in model track by key" class="row list__item">' +
                                    '<div class="list__left row">' +
                                        '<div class="filearray__upload col s8">' +
                                            '<storage-file-upload ng-model="file.fileId"></storage-file-upload>' +
                                        '</div>' +
                                        '<div class="input-field col s4">' +
                                            '<input type="text" ng-model="file.caption" class="filearray__description-input" />' +
                                            '<label>'+i18n['js_dir_image_description']+'</label>' +
                                        '</div>' +
                                    '</div>' +
                                    '<div class="list__right">' +
                                        '<button type="button" class="btn-floating list__button [ blue lighten-1 ]" ng-click="moveUp(key)" ng-show="{{key > 0}}"><i class="material-icons">keyboard_arrow_up</i></button>' +
                                        '<button type="button" class="btn-floating list__button [ blue lighten-1 ]" ng-click="moveDown(key)" ng-show="showDownButton(key)"><i class="material-icons">keyboard_arrow_down</i></button>' +
                                        '<button type="button" class="btn-floating list__button [ red lighten-1 ]" ng-click="remove(key)" tabindex="-1"><i class="material-icons">remove</i></button>' +
                                    '</div>' +
                                '</div>' +
                                '<button ng-click="add()" type="button" class="btn-floating left list__add-button [ waves-effect waves-circle waves-light ]"><i class="material-icons">add</i></button>' +
                            '</div>' +
                        '</div>';
            }
        }
    });

    zaa.directive("zaaMultipleInputs", function() {
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname"
            },
            controller: function ($scope) {
                $scope.init = function() {
                    if ($scope.model == undefined || $scope.model == null) {
                        $scope.model = [];
                    }
                };

                $scope.add = function() {
                    if ($scope.model == null || $scope.model == '' || $scope.model == undefined) {
                        $scope.model = [];
                    }

                    $scope.model.push({});
                };

                $scope.remove = function(key) {
                    $scope.model.splice(key, 1);
                };

                $scope.moveUp = function(index) {
                    index = parseInt(index);
                    var oldRow = $scope.model[index];
                    $scope.model[index] = $scope.model[index-1];
                    $scope.model[index-1] = oldRow;
                };

                $scope.moveDown = function(index) {
                    index = parseInt(index);
                    var oldRow = $scope.model[index];
                    $scope.model[index] = $scope.model[index+1];
                    $scope.model[index+1] = oldRow;
                };

                $scope.showDownButton = function(index) {
                    return parseInt(index) < Object.keys($scope.model).length - 1;
                };

                $scope.init();
            },
            template: function() {
                return '<div>' +
                            '<div class="input input--list list" ng-class="{\'input--hide-label\': i18n}">' +
                                '<label class="input__label">{{label}}</label>' +
                                '<div class="input__field-wrapper">' +
                                    '<p class="list__no-entry" ng-hide="model.length > 0">'+i18n['js_dir_no_selection']+'</p>' +
                                    '<div ng-repeat="(key,row) in model track by key" class="list__item list__item--bordered">' +
                                        '<div class="list__left" style="width: calc(100% - 140px)">' +
                                            '<div ng-repeat="(optKey,opt) in options track by optKey"><zaa-injector dir="opt.type" options="opt.options" fieldid="id-{{key}}-{{optKey}}" fieldname="{{opt.var}}" initvalue="{{opt.initvalue}}" label="{{opt.label}}" model="row[opt.var]"></zaa-injector></div>' +
                                        '</div>' +
                                        '<div class="list__right" style="width: 130px">' +
                                            '<button type="button" class="btn-floating list__button [ blue lighten-1 ]" ng-show="{{key > 0}}" ng-click="moveUp(key)"><i class="material-icons">keyboard_arrow_up</i></button>' +
                                            '<button type="button" class="btn-floating list__button [ blue lighten-1 ]" ng-show="showDownButton(key)" ng-click="moveDown(key)"><i class="material-icons">keyboard_arrow_down</i></button>' +
                                            '<button type="button" class="btn-floating list__button [ red lighten-1 ]" ng-click="remove(key)" tabindex="-1"><i class="material-icons">remove</i></button>' +
                                        '</div>' +
                                    '</div>' +
                                    '<button ng-click="add()" type="button" class="btn-floating left list__add-button"><i class="material-icons">add</i></button>' +
                                '</div>' +
                            '</div>' +
                        '</div>';
            }
        }
    });

    zaa.directive("zaaListArray", function() {
        return {
            restrict: "E",
            scope: {
                "model": "=",
                "options": "=",
                "label": "@label",
                "i18n": "@i18n",
                "id": "@fieldid",
                "name": "@fieldname"
            },
            controller: function($scope, $element, $timeout) {

                $scope.init = function() {
                	if ($scope.model == undefined || $scope.model == null) {
                        $scope.model = [];
                    }
                };

                $scope.add = function() {
                	if ($scope.model == null || $scope.model == '' || $scope.model == undefined) {
                		$scope.model = [];
                	}
                    $scope.model.push({ value : '' });
                    $scope.setFocus();
                };

                $scope.remove = function(key) {
                    $scope.model.splice(key, 1);
                };

                $scope.refactor = function(key, row) {
                    if (key !== ($scope.model.length -1)) {
                        if (row['value'] == "") {
                            $scope.remove(key);
                        }
                    }
                };

                $scope.setFocus = function() {
                    $timeout(function() {
                        var input = $element.children('.list').children('.list__item:last-of-type').children('.list__left').children('input');

                        if(input.length == 1) {
                            input[0].focus();
                        }
                    }, 50);
                };

                $scope.moveUp = function(index) {
                    index = parseInt(index);
                    var oldRow = $scope.model[index];
                    $scope.model[index] = $scope.model[index-1];
                    $scope.model[index-1] = oldRow;
                }

                $scope.moveDown = function(index) {
                    index = parseInt(index);
                    var oldRow = $scope.model[index];
                    $scope.model[index] = $scope.model[index+1];
                    $scope.model[index+1] = oldRow;
                }

                $scope.showDownButton = function(index) {
                    if (parseInt(index) < Object.keys($scope.model).length - 1) {
                        return true;
                    }
                    return false;
                }

                $scope.init();

            },
            template: function() {
                return '<div class="input input--list list" ng-class="{\'input--hide-label\': i18n}">' +
                            '<label class="input__label">{{label}}</label>' +
                            '<div class="input__field-wrapper">' +
                                '<p class="list__no-entry" ng-hide="model.length > 0">'+i18n['js_dir_no_selection']+'</p>' +
                                '<div ng-repeat="(key,row) in model track by key" class="list__item">' +
                                    '<div class="list__left" style="width:calc(100% - 140px)">' +
                                        '<input class="list__input" type="text" ng-model="row.value" />' +
                                    '</div>' +
                                    '<div class="list__right" style="width:130px">' +
                                        '<button type="button" class="btn-floating list__button [ blue lighten-1 ]" ng-show="{{key > 0}}" ng-click="moveUp(key)"><i class="material-icons">keyboard_arrow_up</i></button>' +
                                        '<button type="button" class="btn-floating list__button [ blue lighten-1 ]" ng-show="showDownButton(key)" ng-click="moveDown(key)"><i class="material-icons">keyboard_arrow_down</i></button>' +
                                        '<button type="button" class="btn-floating list__button [ red lighten-1 ]" ng-click="remove(key)" tabindex="-1"><i class="material-icons">remove</i></button>' +
                                    '</div>' +
                                '</div>' +
                                '<button ng-click="add()" type="button" class="btn-floating left list__add-button [ waves-effect waves-circle waves-light ]"><i class="material-icons">add</i></button>' +
                            '</div>' +
                        '</div>';
            }
        }
    });
    // storage.js

    zaa.directive('storageFileUpload', function($http, ServiceFilesData, $filter) {
        return {
            restrict : 'E',
            scope : {
                ngModel : '='
            },
            link : function(scope) {

                // ServiceFilesData inhertiance

                scope.filesData = ServiceFilesData.data;

                scope.$on('service:FilesData', function(event, data) {
                    scope.filesData = data;
                });

                // controller logic

                scope.modal = {state: 1};
                scope.fileinfo = null;

                scope.select = function(fileId) {
                    scope.toggleModal();
                    scope.ngModel = fileId;
                }

                scope.reset = function() {
                	scope.ngModel = 0;
                	scope.fileinfo = null;
                }

                scope.toggleModal = function() {
                    scope.modal.state = !scope.modal.state;
                }

                scope.$watch(function() { return scope.ngModel }, function(n, o) {
                    if (n != 0 && n != null && n !== undefined) {
                        var filtering = $filter('filter')(scope.filesData, {id: n}, true);
                        if (filtering && filtering.length == 1) {
                            scope.fileinfo = filtering[0];
                        }
                    }

                    /* reset file directive if an event resets the image model to undefined */
                    if (n == 0) {
                    	scope.reset();
                    }
                });
            },
            templateUrl : 'storageFileUpload'
        }
    });

    zaa.directive('storageFileDisplay', function(ServiceFilesData) {
    	return {
    		restrict: 'E',
    		scope: {
    			fileId: '@fileId'
    		},
    		controller: function($scope, $filter) {

    			// ServiceFilesData inheritance

                $scope.filesData = ServiceFilesData.data;

                $scope.$on('service:FilesData', function(event, data) {
                    $scope.filesData = data;
                });

                // controller

                $scope.fileinfo = null;

                $scope.$watch('fileId', function(n, o) {
                    if (n != 0 && n != null && n !== undefined) {
                    	var filtering = $filter('filter')($scope.filesData, {id: n}, true);
                        if (filtering && filtering.length == 1) {
                        	$scope.fileinfo = filtering[0];
                        }
                    }
                });
    		},
    		template: function() {
                return '<div ng-show="fileinfo!==null">{{ fileinfo.name }}</div>';
            }
    	}
    });

    zaa.directive('storageImageThumbnailDisplay', function(ServiceImagesData, ServiceFilesData) {
        return {
            restrict: 'E',
            scope: {
                imageId: '@imageId'
            },
            controller: function($scope, $filter) {

                // ServiceFilesData inheritance

                $scope.filesData = ServiceFilesData.data;

                $scope.$on('service:FilesData', function(event, data) {
                    $scope.filesData = data;
                });

                // ServiceImagesData inheritance

                $scope.imagesData = ServiceImagesData.data;

                $scope.$on('service:ImagesData', function(event, data) {
                    $scope.imagesData = data;
                });

                // controller logic

                $scope.$watch(function() { return $scope.imageId }, function(n, o) {
                    if (n != 0 && n !== undefined) {

                        var filtering = $filter('findidfilter')($scope.imagesData, n, true);

                        var file = $filter('findidfilter')($scope.filesData, filtering.fileId, true);

                        if (file && file.thumbnail) {
                        	$scope.imageSrc = file.thumbnail.source;
                        }
                    }
                });

                $scope.imageSrc = null;
            },
            template: function() {
                return '<div ng-show="imageSrc!==false"><img ng-src="{{imageSrc}}" /></div>';
            }
        }
    });

    zaa.directive('storageImageUpload', function($http, $filter, ServiceFiltersData, ServiceImagesData, AdminToastService) {
        return {
            restrict : 'E',
            scope : {
                ngModel : '=',
                options : '=',
            },
            link : function(scope) {

                // ServiceImagesData inheritance

                scope.imagesData = ServiceImagesData.data;

                scope.$on('service:ImagesData', function(event, data) {
                    scope.imagesData = data;
                });

                scope.imagesDataReload = function() {
                    return ServiceImagesData.load(true);
                }

                // ServiceFiltesrData inheritance

                scope.filtersData = ServiceFiltersData.data;

                scope.$on('service:FiltersData', function(event, data) {
                    scope.filtersData = data;
                });

                // controller logic

                scope.noFilters = function() {
                    if (scope.options) {
                        return scope.options.no_filter;
                    }
                }

                scope.thumbnailfilter = null;

                scope.imageLoading = false;

                scope.fileId = 0;

                scope.filterId = 0;

                scope.imageinfo = null;

                scope.imageNotFoundError = false;

                scope.filterApply = function() {
                    var items = $filter('filter')(scope.imagesData, {fileId: scope.fileId, filterId: scope.filterId}, true);
                    if (items && items.length == 0) {
                        scope.imageLoading = true;
                        // image does not exists make request.
                        $http.post('admin/api-admin-storage/image-upload', $.param({ fileId : scope.fileId, filterId : scope.filterId }), {
                            headers : {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
                        }).then(function(transport) {
                            if (!transport.data.error) {
                                scope.imagesDataReload().then(function(r) {
                                    scope.ngModel = success.id;
                                    AdminToastService.success(i18n['js_dir_image_upload_ok'], 2000);
                                    scope.imageLoading = false;
                                });
                            }
                        }, function(error) {
                        	AdminToastService.error(i18n['js_dir_image_filter_error'], 7000);
                            scope.imageLoading = false;
                        });
                    } else {
                        var item = items[0];
                        scope.ngModel = item.id
                        scope.imageinfo = item;
                    }
                };

                scope.$watch(function() { return scope.filterId }, function(n, o) {
                    if (n != null && n !== undefined && scope.fileId !== 0 && n !== o && n != o) {
                        scope.filterApply();
                    }
                });

                scope.$watch(function() { return scope.fileId }, function(n, o) {
                	if (n !== undefined && n != null && n != o) {
                		if (n == 0) {
                            scope.filterId = 0;
                            scope.imageinfo = null;
                            scope.ngModel = 0;
                        } else {
                        	scope.filterApply();
                        }
                    }
                });

                scope.$watch(function() { return scope.ngModel }, function(n, o) {
                    if (n != 0 && n != null && n !== undefined) {
                        var filtering = $filter('findidfilter')(scope.imagesData, n, true);
                        if (filtering) {
                            scope.imageinfo = filtering;
                            scope.filterId = filtering.filterId;
                            scope.fileId = filtering.fileId;
                        } else {
                        	scope.imageNotFoundError = true;
                        }
                    }
                    /* reset image preview directive if an event resets the image model to undefined */
                    if (n == undefined || n == 0) {
                    	scope.fileId = 0;
                        scope.filterId = 0;
                        scope.imageinfo = null;
                        scope.thumb = false;
                    }

                });

                scope.thumb = false;

                scope.getThumbnailFilter = function() {
                	if (scope.thumbnailfilter === null) {
                		if ('medium-thumbnail' in scope.filtersData) {
                			scope.thumbnailfilter = scope.filtersData['medium-thumbnail'];
                		}
                	}
                	return scope.thumbnailfilter;
                }

                scope.$watch('imageinfo', function(n, o) {
                	if (n != 0 && n != null && n !== undefined) {
                		if (n.filterId != 0) {
                			scope.thumb = n;
                		} else {
                			var result = $filter('findthumbnail')(scope.imagesData, n.fileId, scope.getThumbnailFilter().id);
                			if (!result) {
                				scope.thumb = n;
                			} else {
                				scope.thumb = result;
                			}
                		}
                	}
                })
            },
            templateUrl : 'storageImageUpload'
        }
    });

    zaa.filter("filemanagerdirsfilter", function() {
        return function(input, parentFolderId) {
            var result = [];
            angular.forEach(input, function(value, key) {
                if (value.parentId == parentFolderId) {
                    result.push(value);
                }
            });

            return result;
        };
    });

    zaa.filter("findthumbnail", function() {
    	return function(input, fileId, thumbnailFilterId) {
    		var result = false;
    		angular.forEach(input, function(value, key) {
    			if (!result) {
	    			if (value.fileId == fileId && value.filterId == thumbnailFilterId) {
	    				result = value;
	    			}
    			}
    		})

    		return result;
    	}
    });

    zaa.filter("findidfilter", function() {
        return function(input, id) {

            var result = false;

            angular.forEach(input, function(value, key) {
                if (value.id == id) {
                    result = value;
                }
            });

            return result;
        }
    });

    zaa.filter("filemanagerfilesfilter", function() {
        return function(input, folderId, onlyImages) {

            var result = [];

            angular.forEach(input, function(data) {
                if (onlyImages) {
                    if (data.folderId == folderId && data.isImage == true) {
                        result.push(data);
                    }
                } else {
                    if (data.folderId == folderId) {
                        result.push(data);
                    }
                }
            });

            return result;
        };
    });

    /**
     * FILE MANAGER DIR
     */
    zaa.directive("storageFileManager", function(Upload, ServiceFoldersData, ServiceFilesData, LuyaLoading, AdminToastService, ServiceFoldersDirecotryId) {
        return {
            restrict : 'E',
            transclude : false,
            scope : {
                allowSelection : '@selection',
                onlyImages : '@onlyImages'
            },
            controller : function($scope, $http, $filter, $timeout) {

                // ServiceFoldersData inheritance

                $scope.foldersData = ServiceFoldersData.data;

                $scope.$on('service:FoldersData', function(event, data) {
                    $scope.foldersData = data;
                });

                $scope.foldersDataReload = function() {
                    return ServiceFoldersData.load(true);
                }

                // ServiceFilesData inheritance

                $scope.filesData = ServiceFilesData.data;

                $scope.$on('service:FilesData', function(event, data) {
                    $scope.filesData = data;
                });

                $scope.filesDataReload = function() {
                    return ServiceFilesData.load(true);
                }

                // ServiceFolderId

                $scope.currentFolderId = ServiceFoldersDirecotryId.folderId;

                $scope.$on('FoldersDirectoryId', function(event, folderId) {
                	$scope.currentFolderId = folderId;
                });

                $scope.foldersDirecotryIdReload = function() {
                	return ServiceFoldersDirecotryId.load(true);
                }
                
                // file replace logic

                $scope.folderCountMessage = function(folder) {
                	return i18nParam('js_filemanager_count_files_overlay', {count: folder.filesCount});
                }
                
                $scope.replaceFile = function(file, errorFiles) {
                	$scope.replaceFiled = file;
                	
                	if (!file) {
                		return;
                	}
                	
                	LuyaLoading.start();
                	file.upload = Upload.upload({
                		url: 'admin/api-admin-storage/file-replace',
                        data: {file: file, fileId: $scope.fileDetail.id}
                    });
                	
                	file.upload.then(function (response) {
                        $timeout(function () {
                            file.result = response.data;
                            $scope.filesDataReload().then(function() {
                            	var fileref = $filter('findidfilter')($scope.filesData, $scope.fileDetail.id, true);
                            	var random = (new Date()).toString();
                            	if (fileref.isImage) {
	                            	fileref.thumbnail.source = fileref.thumbnail.source + "?cb=" + random;
	                            	fileref.thumbnailMedium.source = fileref.thumbnailMedium.source + "?cb=" + random;
	                            }
                            	
                            	$scope.fileDetail = fileref;
                            	
                            	LuyaLoading.stop();
                            	AdminToastService.success('the file has been replaced successfull.', 4000);
                            });
                        });
                    });
                };

                // upload logic

                $scope.$watch('uploadingfiles', function (uploadingfiles) {
                    if (uploadingfiles != null) {
                        $scope.uploadResults = 0;
                        LuyaLoading.start(i18n['js_dir_upload_wait']);
                        for (var i = 0; i < uploadingfiles.length; i++) {
                            $scope.errorMsg = null;
                            (function (uploadingfiles) {
                                $scope.uploadUsingUpload(uploadingfiles);
                            })(uploadingfiles[i]);
                        }
                    }
                });

                $scope.$watch('uploadResults', function(n, o) {
                    if ($scope.uploadingfiles != null) {
                        if (n == $scope.uploadingfiles.length) {
                            $scope.filesDataReload().then(function() {
                            	AdminToastService.success(i18n['js_dir_manager_upload_image_ok'], 2000);
                                LuyaLoading.stop();
                            });
                        }
                    }
                })

                $scope.pasteUpload = function(e) {
                	
                    for (var i = 0 ; i < e.originalEvent.clipboardData.items.length ; i++) {
                        var item = e.originalEvent.clipboardData.items[i];
                        
                        if (item.kind == 'file') {
                        	LuyaLoading.start(i18n['js_dir_upload_wait']);
	                        Upload.upload({
	                            url: 'admin/api-admin-storage/files-upload',
	                            fields: {'folderId': $scope.currentFolderId},
	                            file: item.getAsFile()
	                        }).then(function(response) {
	                        	$scope.filesDataReload().then(function() {
	                            	AdminToastService.success(i18n['js_dir_manager_upload_image_ok'], 2000);
	                                LuyaLoading.stop();
	                            });
	                        })
                        }
                    }
                }
                
                $scope.uploadUsingUpload = function(file) {
                	file.upload = Upload.upload({
                        url: 'admin/api-admin-storage/files-upload',
                        fields: {'folderId': $scope.currentFolderId},
                        file: file
                    });

                    file.upload.then(function (response) {
                        $timeout(function () {
                            $scope.uploadResults++;
                            file.processed = true;
                            file.result = response.data;

                            if (file.result.upload == false) {
                                $scope.errorMsg = file.result.message;
                            }
                        });
                    }, function (response) {
                        if (response.status > 0) {
                            $scope.errorMsg = response.status + ': ' + response.data;
                        }
                    });

                    file.upload.progress(function (evt) {
                        file.processed = false;
                        // Math.min is to fix IE which reports 200% sometimes
                        file.progress = Math.min(100, parseInt(100.0 * evt.loaded / evt.total));
                    });
                }

                // selector logic

                $scope.selectedFiles = [];

                $scope.toggleSelectionAll = function() {
                	var files = $filter('filemanagerfilesfilter')($scope.filesData, $scope.currentFolderId, $scope.onlyImages);
                	files.forEach(function(value, key) {
                		$scope.toggleSelection(value);
                	})
                }

                $scope.toggleSelection = function(file) {
                    if ($scope.allowSelection == 'true') {
                        // parent inject
                        $scope.$parent.select(file.id);
                        return;
                    }

                    var i = $scope.selectedFiles.indexOf(file.id);
                    if (i > -1) {
                        $scope.selectedFiles.splice(i, 1);
                    } else {
                        $scope.selectedFiles.push(file.id);
                    }
                };

                $scope.inSelection = function(file) {
                    var response = $scope.selectedFiles.indexOf(file.id);

                    if (response != -1) {
                        return true;
                    }

                    return false;
                };

                // folder add

                $scope.showFolderForm = false;

                $scope.createNewFolder = function(newFolderName) {
                    $http.post('admin/api-admin-storage/folder-create', $.param({ folderName : newFolderName , parentFolderId : $scope.currentFolderId }), {
                        headers : {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
                    }).then(function() {
                        $scope.foldersDataReload().then(function() {
                            $scope.folderFormToggler();
                            $scope.newFolderName = null;
                        })
                    });
                };

                $scope.folderFormToggler = function() {
                    $scope.showFolderForm = !$scope.showFolderForm;
                };

                // controller logic

                $scope.searchQuery = '';

                $scope.sortField = 'name';

                $scope.changeSortField = function(name) {
                	$scope.sortField = name;
                }

                $scope.changeCurrentFolderId = function(folderId, noState) {
                    $scope.currentFolderId = folderId;
                    if (noState !== true) {
                    	ServiceFoldersDirecotryId.folderId = folderId;
                    	$http.post('admin/api-admin-common/save-filemanager-folder-state', {folderId : folderId}, {ignoreLoadingBar: true});
                    }
                };

                $scope.toggleFolderItem = function(data) {
                    if (data.toggle_open == undefined) {
                        data['toggle_open'] = 1;
                    } else {
                        data['toggle_open'] = !data.toggle_open;
                    }
                    $http.post('admin/api-admin-common/filemanager-foldertree-history', {data : data}, {ignoreLoadingBar: true});
                };

                $scope.folderUpdateForm = false;

                $scope.folderDeleteForm = false;

                $scope.folderDeleteConfirmForm = false;

                $scope.toggleFolderMode = function(mode) {
                    if (mode == 'edit') {
                        $scope.folderUpdateForm = true;
                        $scope.folderDeleteForm = false;
                        $scope.folderDeleteConfirmForm = false;
                    } else if (mode == 'remove') {
                        $scope.folderUpdateForm = false;
                        $scope.folderDeleteForm = true;
                        $scope.folderDeleteConfirmForm = false;
                    } else if (mode == 'removeconfirm') {
                        $scope.folderUpdateForm = false;
                        $scope.folderDeleteForm = false;
                        $scope.folderDeleteConfirmForm = true;
                    } else {
                        $scope.folderUpdateForm = false;
                        $scope.folderDeleteForm = false;
                        $scope.folderDeleteConfirmForm = false;
                    }
                };

                $scope.updateFolder = function(folder) {
                    $http.post('admin/api-admin-storage/folder-update?folderId=' + folder.id, $.param({ name : folder.name }), {
                        headers : {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
                    }).then(function(transport) {
                        $scope.toggleFolderMode(false);
                    });
                }

                $scope.checkEmptyFolder = function(folder) {
                    $http.post('admin/api-admin-storage/is-folder-empty?folderId=' + folder.id, $.param({ name : folder.name }), {
                        headers : {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
                    }).then(function(transport) {
                        if (transport.data == true) {
                            $scope.deleteFolder(folder);
                        } else {
                            $scope.toggleFolderMode('removeconfirm');
                        }
                    });
                };

                $scope.deleteFolder = function(folder) {
                    // check if folder is empty
                    $http.post('admin/api-admin-storage/folder-delete?folderId=' + folder.id, $.param({ name : folder.name }), {
                        headers : {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
                    }).then(function(transport) {
                        $scope.foldersDataReload().then(function() {
                            $scope.filesDataReload().then(function() {
                                $scope.toggleFolderMode(false);
                                $scope.currentFolderId = 0;
                            });
                        });
                    });
                };

                $scope.fileDetail = false;

                $scope.showFoldersToMove = false;

                $scope.openFileDetail = function(file) {
                    $scope.fileDetail = file;
                };

                $scope.closeFileDetail = function() {
                    $scope.fileDetail = false;
                };

                $scope.moveFilesTo = function(folderId) {
                    $http.post('admin/api-admin-storage/filemanager-move-files', $.param({'fileIds' : $scope.selectedFiles, 'toFolderId' : folderId}), {
                        headers : {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
                    }).then(function(transport) {
                        $scope.filesDataReload().then(function() {
                            $scope.selectedFiles = [];
                            $scope.showFoldersToMove = false;
                        });
                    });
                };

                $scope.removeFiles = function() {
                    AdminToastService.confirm(i18n['js_dir_manager_rm_file_confirm'], function($timeout, $toast) {
                        $http.post('admin/api-admin-storage/filemanager-remove-files', $.param({'ids' : $scope.selectedFiles}), {
                            headers : {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
                        }).then(function(transport) {
                            $scope.filesDataReload().then(function() {
                                $toast.close();
                                AdminToastService.success(i18n['js_dir_manager_rm_file_ok'], 2000);
                                $scope.selectedFiles = [];
                            });
                        });
                    });
                }

                // file detail view logic

                $scope.storeFileCaption = function(fileDetail) {
                	$http.post('admin/api-admin-storage/filemanager-update-caption', $.param({'id': fileDetail.id, 'captionsText' : fileDetail.captionArray}), {
                        headers : {'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'}
                    }).then(function(transport) {
                    	AdminToastService.success('Captions has been updated', 2000);
                    });
                }
               
                $scope.selectedFileFromParent = null;
                
                $scope.init = function() {
                	if ($scope.$parent.fileinfo) {
                		$scope.selectedFileFromParent = $scope.$parent.fileinfo;
                		$scope.changeCurrentFolderId($scope.selectedFileFromParent.folderId, true);
                	}
                }
                
                $scope.init();

            },
            templateUrl : 'storageFileManager'
        }
    });

})();

var observeLogin = function(form, url, secureUrl) {
	$(form).submit(function(e) {
        $('#errorsContainer').hide();
		$('.spinner').show(); $('.submit-icon').hide();
		e.preventDefault();
		$.ajax({
			type: "POST",
			url: url,
			data: $(this).serialize(),
			success : function(response) {
                $('.spinner').hide(); $('.submit-icon').show();
				var refresh = response['refresh'];
				var errors = response['errors'];
				var enterSecureToken = response['enterSecureToken'];
				
				var errorHtml = '<ul>';
				for(var i in errors) {
					errorHtml = errorHtml + '<li>' + errors[i] + '</li>';
				}
				errorHtml = errorHtml + '</ul>';
				
				if (errors) {
					$('#errorsContainer').html(errorHtml);
					$('#errorsContainer').show();
				}
				
				
				if (enterSecureToken) {
					$('#secureForm').show();
					$('#loginForm').hide();
				}
				
				if (refresh) {
                    $('#secureForm').hide();
                    $('#loginForm').hide();
                    $('#success').show();
                    location.reload();
				}
			},
			dataType: "json"
		});
	});
	
	$('#secureForm').submit(function(e) {
		$('#errorsContainer').hide();
        $('.spinner').show(); $('.submit-icon').hide();
		e.preventDefault();
		$.ajax({
			type: "POST",
			url: secureUrl,
			data: $(this).serialize(),
			success : function(response) {
                $('.spinner').hide(); $('.submit-icon').show();
				var refresh = response['refresh'];
				
				if (response['errors']) {
					$('#errorsContainer').html('<ul><li>' + response['errors'] + '</li></ul>');
					$('#errorsContainer').show();
				}
				
				if (refresh) {
                    $('#secureForm').hide();
                    $('#loginForm').hide();
					$('#success').show();
                    location.reload();
				}
			},
			dataType: "json"
		})
	});
	
	$('#abortToken').click(function(e) {
        $('.spinner').hide(); $('.submit-icon').show();
		$('#errorsContainer').hide();
		$('#secureForm').hide();
		$('#loginForm').show();
		$('#success').hide();
	});
};
// service resolver
function adminServiceResolver(ServiceFoldersData, ServiceImagesData, ServiceFilesData, ServiceFiltersData, ServiceLanguagesData, ServicePropertiesData, AdminLangService, ServiceFoldersDirecotryId) {
	ServiceFiltersData.load();
	ServiceFoldersData.load();
	ServiceImagesData.load();
	ServiceFilesData.load();
	ServiceLanguagesData.load();
	ServicePropertiesData.load();
	AdminLangService.load();
	ServiceFoldersDirecotryId.load();
};

/**
 * all global admin services
 * 
 * controller resolve: https://github.com/johnpapa/angular-styleguide#style-y080
 * 
 * Service Inheritance:
 * 
 * 1. Service must be prefix with Service
 * 2. Service must contain a forceReload state
 * 3. Service must broadcast an event 'service:FoldersData'
 * 4. Controller integration must look like
 * 
 * ```
 * $scope.foldersData = ServiceFoldersData.data;
 *				
 * $scope.$on('service:FoldersData', function(event, data) {
 *      $scope.foldersData = data;
 * });
 *				
 * $scope.foldersDataReload = function() {
 *     return ServiceFoldersData.load(true);
 * }
 * ```
 * 
 */
(function() {
	"use strict";
	
/*

$scope.foldersData = ServiceFoldersData.data;
					
$scope.$on('service:FoldersData', function(event, data) {
	$scope.foldersData = data;
});

$scope.foldersDataReload = function() {
	return ServiceFoldersData.load(true);
}

*/
zaa.factory("ServiceFoldersData", function($http, $q, $rootScope) {
	
	var service = [];
	
	service.data = null;
	
	service.load = function(forceReload) {
		return $q(function(resolve, reject) {
			if (service.data !== null && forceReload !== true) {
				resolve(service.data);
			} else {
				$http.get("admin/api-admin-storage/data-folders").then(function(response) {
					service.data = response.data;
					$rootScope.$broadcast('service:FoldersData', service.data);
					resolve(service.data);
				});
			}
		});
	};
	
	return service;
});

/*

$scope.folderId = ServiceFoldersDirecotryId.folderId;
					
$scope.$on('FoldersDirectoryId', function(event, folderId) {
	$scope.folderId = folderId;
});

$scope.foldersDirecotryIdReload = function() {
	return ServiceFoldersDirecotryId.load(true);
}

*/
zaa.factory("ServiceFoldersDirecotryId", function($http, $q, $rootScope) {
	
	var service = [];
	
	service.folderId = false;
	
	service.load = function(forceReload) {
		return $q(function(resolve, reject) {
			if (service.folderId !== false && forceReload !== true) {
				resolve(service.folderId);
			} else {
				$http.get("admin/api-admin-common/get-filemanager-folder-state").then(function(response) {
					service.folderId = response.data;
					$rootScope.$broadcast('service:FoldersDirectoryId', service.folderId);
					resolve(service.folderId);
				});
			}
		});
	};
	
	return service;
});

/*

$scope.imagesData = ServiceImagesData.data;
				
$scope.$on('service:ImagesData', function(event, data) {
	$scope.imagesData = data;
});

$scope.imagesDataReload = function() {
	return ServiceImagesData.load(true);
}

*/
zaa.factory("ServiceImagesData", function($http, $q, $rootScope) {
	var service = [];
	
	service.data = null;
	
	service.load = function(forceReload) {
		return $q(function(resolve, reject) {
			if (service.data !== null && forceReload !== true) {
				resolve(service.data);
			} else {
				$http.get("admin/api-admin-storage/data-images").then(function(response) {
					service.data = response.data;
					$rootScope.$broadcast('service:ImagesData', service.data);
					resolve(service.data);
				});
			}
		});
	};
	
	return service;
});

/*

$scope.filesData = ServiceFilesData.data;
				
$scope.$on('service:FilesData', function(event, data) {
	$scope.filesData = data;
});

$scope.filesDataReload = function() {
	return ServiceFilesData.load(true);
}
				
*/
zaa.factory("ServiceFilesData", function($http, $q, $rootScope) {
	var service = [];
	
	service.data = null;
	
	service.load = function(forceReload) {
		return $q(function(resolve, reject) {
			if (service.data !== null && forceReload !== true) {
				resolve(service.data);
			} else {
				$http.get("admin/api-admin-storage/data-files").then(function(response) {
					service.data = response.data;
					$rootScope.$broadcast('service:FilesData', service.data);
					resolve(service.data);
				});
			}
		});
	};
	
	return service;
});

/*

$scope.filtersData = ServiceFiltersData.data;
				
$scope.$on('service:FiltersData', function(event, data) {
	$scope.filtersData = data;
});

$scope.filtersDataReload = function() {
	return ServiceFiltersData.load(true);
}
				
*/
zaa.factory("ServiceFiltersData", function($http, $q, $rootScope) {
	var service = [];
	
	service.data = null;
	
	service.load = function(forceReload) {
		return $q(function(resolve, reject) {
			if (service.data !== null && forceReload !== true) {
				resolve(service.data);
			} else {
				$http.get("admin/api-admin-storage/data-filters").then(function(response) {
					service.data = response.data;
					$rootScope.$broadcast('service:FiltersData', service.data);
					resolve(service.data);
				});
			}
		});
	};
	
	return service;
});

/*

$scope.languagesData = ServiceLanguagesData.data;
				
$scope.$on('service:LanguagesData', function(event, data) {
	$scope.languagesData = data;
});

$scope.languagesDataReload = function() {
	return ServiceLanguagesData.load(true);
}
				
*/
zaa.factory("ServiceLanguagesData", function($http, $q, $rootScope) {
	var service = [];
	
	service.data = [];
	
	service.load = function(forceReload) {
		return $q(function(resolve, reject) {
			if (service.data.length > 0 && forceReload !== true) {
				resolve(service.data);
			} else {
				$http.get("admin/api-admin-common/data-languages").then(function(response) {
					service.data = response.data;
					$rootScope.$broadcast('service:LanguagesData', service.data);
					resolve(service.data);
				})
			}
		});
	};
	
	return service;
});

/*

$scope.propertiesData = ServicePropertiesData.data;
				
$scope.$on('service:PropertiesData', function(event, data) {
	$scope.propertiesData = data;
});

$scope.propertiesDataReload = function() {
	return ServicePropertiesData.load(true);
}
				
*/
zaa.factory("ServicePropertiesData", function($http, $q, $rootScope) {
	var service = [];
	
	service.data = null;
	
	service.load = function(forceReload) {
		return $q(function(resolve, reject) {
			if (service.data !== null && forceReload !== true) {
				resolve(service.data);
			} else {
				$http.get("admin/api-admin-common/data-properties").then(function(response) {
					service.data = response.data;
					$rootScope.$broadcast('service:PropertiesData', service.data);
					resolve(service.data);
				})
			}
		});
	};
	
	return service;
});

zaa.factory("CrudTabService", function() {
	
	var service = [];
	
	service.tabs = [];
	
	service.remove = function(index, $scope) {
		service.tabs.splice(index, 1);
		
		if (service.tabs.length > 0) {
			var lastTab = service.tabs.slice(-1)[0];
			lastTab.active = true;
		} else {
			$scope.switchTo(0);
		}
	};
	
	service.addTab = function(id, api, arrayIndex, name, modelClass) {
		service.tabs.push({id: id, api: api, arrayIndex: arrayIndex, active: false, name: name, modelClass:modelClass});
	};
	
	service.clear = function() {
		service.tabs = [];
	};
	
	return service;
});

/*
 
 language service with selections
 
*/
zaa.factory("AdminLangService", function(ServiceLanguagesData, $rootScope) {
	
	var service = [];
	
	service.data = [];
	
	service.selection = [];
	
	service.toggleSelection = function(lang) {
		var exists = service.selection.indexOf(lang.short_code);
		
		if (exists == -1) {
			service.selection.push(lang.short_code);
			$rootScope.$broadcast('service:LoadLanguage', lang);
		} else {
			/* #531: unable to deselect language, as at least 1 langauge must be activated. */
			if (service.selection.length > 1) {
				service.selection.splice(exists, 1);
			}
		}
	};
	
	service.isInSelection = function(langShortCode) {
		var exists = service.selection.indexOf(langShortCode);
		if (exists == -1) {
			return false;
		}
		return true;
	};
	
	service.resetDefault = function() {
		service.selection = [];
		angular.forEach(ServiceLanguagesData.data, function(value, key) {
			if (value.is_default == 1) {
				if (!service.isInSelection(value.short_code)) {
					service.toggleSelection(value);
				}
			}
		})
	};
	
	service.load = function() {
		ServiceLanguagesData.load().then(function(data) {
			service.data = data;
			
			angular.forEach(data, function(value) {
				if (value.is_default == 1) {
					if (!service.isInSelection(value.short_code)) {
						service.toggleSelection(value);
					}
				}
			})
			
		});
	};
	
	return service;
});



/*

$scope.filesData = ServiceFilesData.data;
				
$scope.$on('service:AdminToast', function(event, data) {
	$scope.filesData = data;
});

Examples

AdminToastService.notify('Hello i am Message and will be dismissed in 2 Seconds', 2000');

AdminToastService.confirm('Hello i am a callback and wait for your', function($q, $http) {
	// do some ajax call
	$http.get().success(function() {
		promise.resolve();
	}).error(function() {
		promise.reject();
	});
});

you can also close this dialog by sourself in the callback

AdminToastService.confi('Message', function() {
	// do something
	this.close();
});

instead of this you can also invoke $toast

function($toast) {
	$toast.close();
}

*/
zaa.factory("AdminToastService", function($q, $timeout, $injector) {
	var service = [];
	
	service.notify = function(message, timeout, type) {
		
		var uuid = guid();
		
		service.queue[uuid] = {message: message, timeout: timeout, uuid: uuid, type: type};
		
		$timeout(function() {
			delete service.queue[uuid];
		}, timeout);
	};
	
	service.success = function(message, timeout) {
		service.notify(message, timeout, 'success');
	};
	
	service.error = function(message, timeout) {
		service.notify(message, timeout, 'error');
	};
	
	service.confirm = function(message, callback) {
		var uuid = guid();
		service.queue[uuid] = {message: message, click: function() {
			var queue = this;
			var response = $injector.invoke(this.callback, this, { $toast : this });
			if (response !== undefined) {
				response.then(function(r) {
						queue.close();
					}, function(r) {
						queue.close();
					}, function(r) {
						// call loader later?
					});
			}
		}, uuid: uuid, callback: callback, type: 'confirm', close: function() {
			delete service.queue[this.uuid];
		}}
	};
	
	service.queue = {};
	
	return service;
});


// end of use strict
})();
var zaa = angular.module("zaa", ["ui.router", "ngDragDrop", "angular-loading-bar", "ngFileUpload", "ngWig", "slugifier", "flow", "angular.filter", "720kb.datepicker", "localytics.directives"]);


/**
 * guid creator
 * @returns {String}
 */
function guid() {
	function s4() {
		return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
	}
  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
}

/**
 * i18n localisation with params.
 *
 * ```js
 * i18nParam('js_i18n_translation_name', {variable: value});
 * ```
 *
 * Translations File:
 *
 * ```php
 * 'js_i18n_translation_name' => 'Hello %variable%',
 * ```
 * @param varName
 * @param params
 * @returns
 */
function i18nParam(varName, params) {
	var varValue = i18n[varName];

	angular.forEach(params, function(value, key) {
		varValue = varValue.replace("%"+key+"%", value);
	})

	return varValue;
}

/**
 * Type cast numeric values to integer
 *
 * @param value
 * @returns
 */
function typeCastValue(value) {
	return $.isNumeric(value) ? parseInt(value) : value;
}

/* zephir angular admin */
/* resolve controller: https://github.com/angular-ui/ui-router/wiki#resolve */
(function() {
	"use strict";

	zaa.config(function ($httpProvider, $stateProvider, $controllerProvider, $urlMatcherFactoryProvider) {
		$httpProvider.interceptors.push("authInterceptor");

		zaa.bootstrap = $controllerProvider;

		$urlMatcherFactoryProvider.strictMode(false)

		$stateProvider
			.state("default", {
				url: "/default/:moduleId",
				templateUrl: function($stateParams) {
					return "admin/template/default";
				}
			})
			.state("default.route", {
				url: "/:moduleRouteId/:controllerId/:actionId",
				templateUrl: function ($stateParams) {
	                return $stateParams.moduleRouteId + "/" + $stateParams.controllerId  + "/" + $stateParams.actionId;
	            },
	            parent: 'default',
	            resolve : {
	            	adminServiceResolver: adminServiceResolver
				}
			})
			.state("custom", {
				url: "/template/:templateId",
				templateUrl: function($stateParams) {
					return $stateParams.templateId;
				},
				resolve : {
					adminServiceResolver: adminServiceResolver,
					resolver : function(resolver) {
						return resolver.then;
					},
				}
			})
			.state("home", {
				url: "",
				templateUrl: "admin/default/dashboard"
			});
	});

	/**
	 * attach custom callback function to the custom state resolve. Use the resolverProvider in
	 * your configuration part:
	 *
	 * zaa.config(function(resolverProvider) {
	 *		resolverProvider.addCallback(function(ServiceMenuData, ServiceBlocksData) {
	 *			ServiceMenuData.load();
	 *			ServiceBlocksData.load();
	 *		});
	 * });
	 */
	zaa.provider("resolver", function() {
		var list = [];

		this.addCallback = function(callback) {
			list.push(callback);
		}

		this.$get = function($injector, $q, $state) {
			return $q(function(resolve, reject) {
				for(var i in list) {
					$injector.invoke(list[i]);
				}
			})
		}
	})

	zaa.filter('trustAsUnsafe', function($sce) {
	    return function(val, enabled) {
	        return $sce.trustAsHtml(val);
	    };
	});

	/**
	 * Controller: $scope.content = $sce.trustAsHtml(response.data);
	 * Template: <div compile-html ng-bind-html="content | trustAsUnsafe"></div>
	 */
	zaa.directive("compileHtml", function($compile, $parse) {
		return {
			restrict: "A",
			link: function(scope, element, attr) {
				var parsed = $parse(attr.ngBindHtml);
				scope.$watch(function() { return (parsed(scope) || "").toString(); }, function() {
			        $compile(element, null, -9999)(scope);  //The -9999 makes it skip directives so that we do not recompile ourselves
		        });
		    }
		};
	});

	/**
	 * Usage:
	 *
	 * ```
	 * <div zaa-esc="methodClosesThisDiv()" />
	 * ```
	 */
	zaa.directive("zaaEsc", function() {
		return function(scope, element, attrs) {
			$(document).on("keyup", function(e) {
				if (e.keyCode == 27) {
					scope.$apply(function() {
						scope.$eval(attrs.zaaEsc);
					});
				}
			});
		};
	});
	
	zaa.directive("linkObjectToString", function() {
		return {
			restrict: 'E',
			relace:true,
			scope: {
				'link' : '='
			},
			template: function() {
				return '<span>'+
				'<span ng-if="link.type==2">Extern: {{link.value}}</span>' +
				'<span ng-if="link.type==1"><show-internal-redirection nav-id="link.value" /></span>' +
				'</span>';
			}
		}
	});
	
	/**
	 * Generate a Tool Tip Overlay, usager:
	 * 
	 * ```
	 * <span tooltip tooltip-text="'Hey Ich habe hier eine Message'">Something Else</span>
	 * ```
	 */
	zaa.directive("tooltip", function() {
		return {
			restrict: 'A',
			scope: {
				'tooltipText' : '=',
				'tooltipOffsetTop': '=',
                'tooltipOffsetLeft': '='
			},
			link:function(scope, element, attr) {
				var html = '<div class="tooltip">' + scope.tooltipText + '</div>';
				var pop = $(html);
                element.after(pop);
				pop.hide();

                element.on('mouseenter', function() {
                	var offset = {
                        top: this.getBoundingClientRect().top + this.offsetHeight,
                        left: this.getBoundingClientRect().left
					};

                	if(typeof scope.tooltipOffsetTop == 'number') {
                		offset.top = offset.top + scope.tooltipOffsetTop;
					}

                    if(typeof scope.tooltipOffsetLeft == 'number') {
                        offset.left = offset.left + scope.tooltipOffsetLeft;
                    }

                    pop.css(offset);

					pop.show();
				});

                element.on('mouseleave', function() {
					pop.hide();
				});

			}
		}
	})

	/**
	 * Convert a string to number value, usefull in selects.
	 *
	 * ```
	 * <select name="filterId" ng-model="filterId" convert-to-number>
	 * ```
	 */
	zaa.directive('convertToNumber', function() {
		return {
		    require: 'ngModel',
		    link: function(scope, element, attrs, ngModel) {
				ngModel.$parsers.push(function(val) {
				    return val != null ? parseInt(val, 10) : null;
				});
				ngModel.$formatters.push(function(val) {
				    return val != null ? '' + val : null;
				});
		    }
		};
	});

    /**
	 * Directive to trigger fixed table head
     */
    zaa.directive("fixedTableHead", function ($window) {
        return function(scope, element, attrs) {
            var initialized = false,
                theadFixed = false,
                table = null,
                thead = null,
                theadOffset = 0,
                theadWidth = 0,
                theadElementsWidth = [],
                theadClone = null;

            /**
             * This function updates the thead and th widths
             * It also sets the thead to fixed or reverses it's changes based on the scroll position
             */
            var update = function() {
                /* Update the width and th widths */
                theadWidth = theadClone.width();
                theadElementsWidth = [];
                theadClone.find('th').each( function() {
                    theadElementsWidth.push(angular.element(this).width());
                });

                theadOffset = (element.scrollTop() + table.offset().top) - element.offset().top;


                if(element.scrollTop() > theadOffset) {

                    /* Show the clone to prevent the table from jumping */
                    theadClone.show();

                    /* Set the th widths */
                    thead.find('th').each( function(index) {
                        angular.element(this).width(theadElementsWidth[index]);
                    });

                    /* Add the required styles to the thead */
                    thead.css({
                        width: theadWidth + 'px',
                        position: 'fixed',
                        backgroundColor: '#fff',
                        zIndex: 300,
                        top: element.offset().top
                    });

                    theadFixed = true;
                } else if(theadFixed) {
                    /* Hide the clone */
                    theadClone.hide();

                    /* Reset the css changes to default */
                    thead.css({
                        width: 'auto',
                        position: 'relative',
                        top: 0
                    });
                    thead.find('th').each( function() {
                        angular.element(this).width("auto");
                    });

                    theadFixed = false;
                }
            };

            /**
             * Update the widths if the window gets resized
             */
            var onResize = function() {
                if(theadFixed) {
                    theadWidth = theadClone.width();

                    theadElementsWidth = [];
                    theadClone.find('th').each( function() {
                        theadElementsWidth.push(angular.element(this).width());
                    });

                    if (thead.length > 0) {
                        update();
                    }
                }
            };

            /**
             * Initialize the plugin on scroll (table contents getting loaded by ajax and table
             * does not exist on load of the directive)
             */
            var onScroll = function () {
                if (!initialized) {
                    table = angular.element(element.find('table'));
                    thead = angular.element(table.find('thead'));

                    if (thead.length > 0) {
                        theadClone = angular.element(table.find('thead')).clone();

                        theadClone.css('visibility', "hidden").insertAfter(thead).hide();

                        initialized = true;
                    } else {
                        angular.element($window).off('resize');
                        angular.element(element).off('scroll');
                    }
                }

                if (thead.length > 0) {
                    update();
                }
            };

            angular.element($window).bind('resize', function() {onResize();});
            angular.element(element).bind("scroll", function() {onScroll();});
        };
    });

	/**
	 * Apply auto generated height for textareas based on input values
	 */
	zaa.directive('autoGrow', function () {
        return function (scope, element, attr) {
            var $shadow = null;

            var destroy = function () {
                if($shadow != null) {
                    $shadow.remove();
                    $shadow = null;
                }
            };

            var update = function () {
                if ($shadow == null) {
                    $shadow = angular.element('<div></div>').css({
                        position: 'absolute',
                        top: -10000,
                        left: -10000,
                        resize: 'none'
                    });

                    angular.element(document.body).append($shadow);
                }

                $shadow.css({
                    fontSize: element.css('font-size'),
                    fontFamily: element.css('font-family'),
                    lineHeight: element.css('line-height'),
                    width: element.width(),
                    paddingTop: element.css('padding-top'),
                    paddingBottom: element.css('padding-bottom')
                });

                var times = function (string, number) {
                    for (var i = 0, r = ''; i < number; i++) {
                        r += string;
                    }
                    return r;
                };

                var val = element.val().replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/&/g, '&amp;')
                    .replace(/\n$/, '<br/>&nbsp;')
                    .replace(/\n/g, '<br/>')
                    .replace(/\s{2,}/g, function (space) {
                        return times('&nbsp;', space.length - 1) + ' '
                    });

                $shadow.html(val);

                element.css('height', $shadow.outerHeight() + 10 + 'px');
            };

            element.bind('keyup keydown keypress change click', update);
            element.bind('blur', destroy);
            update();
        }
    });

	zaa.directive('resizer', function($document) {

		return {
			scope: {
				trigger : '@'
			},
			link: function($scope, $element, $attrs) {


				$scope.$watch('trigger', function(n, o) {
					if (n == 0) {
						$($attrs.resizerLeft).removeAttr('style');
						$($attrs.resizerRight).removeAttr('style');
					}
				})

				$element.on('mousedown', function(event) {
					event.preventDefault();
					$document.on('mousemove', mousemove);
					$document.on('mouseup', mouseup);
				});

				function mousemove(event) {

					$($attrs.resizerCover).show();
					// Handle vertical resizer
					var x = event.pageX;
					var i = window.innerWidth;

					if (x < 600) {
						x = 600;
					}

					if (x > (i-400)) {
						x = (i-400);
					}

					var wl = $($attrs.resizerLeft).width();
					var wr = $($attrs.resizerRight).width();

					$($attrs.resizerLeft).css({
						width: x + 'px'
					});
					$($attrs.resizerRight).css({
						width: (i-x) + 'px'
					});
				}

				function mouseup() {
					$($attrs.resizerCover).hide();
					$document.unbind('mousemove', mousemove);
					$document.unbind('mouseup', mouseup);
				}
			}
		}
	});

	/**
	 * Readded ng-confirm-click in order to provide quick ability to implement confirm boxes.
	 *
	 * ```
	 * <button ng-confirm-click="Are you sure you want to to delete {{data.title}}?" confirmed-click="remove(data)">Remove</button>
     * ```
	 */
	zaa.directive("ngConfirmClick", function() {
 	     return {
 	         link: function (scope, element, attr) {
 	             var msg = attr.ngConfirmClick || "Are you sure?";
 	             var clickAction = attr.confirmedClick;
 	             element.bind("click",function (event) {
 	                 if ( window.confirm(msg) ) {
 	                     scope.$eval(clickAction)
 	                 }
 	             });
 	         }
 	     };
	 });
	
	

	zaa.directive("focusMe", function($timeout) {
		return {
			scope: { trigger: "=focusMe" },
			link: function(scope, element) {
				scope.$watch("trigger", function(value) {
					if (value === true) {
						element[0].focus();
						scope.trigger = false;
					}
				})
			}
		}
	});

	/**
	 * ```
	 * <a href="#" click-paste-pusher="foobar">Test</a>
	 * ```
	 */
	zaa.directive("clickPastePusher", ['$rootScope', '$compile', function($rootScope, $compile) {
		return {
			restrict: 'A',
			replace: false,
			link: function(scope, element, attrs) {
				element.bind('click', function() {
					$rootScope.$broadcast('insertPasteListener', attrs['clickPastePusher']);
				})
	        }
		}
	}]);

	/**
	 *
	 * ```
	 * $rootScope.$broadcast('insertPasteListener', $scope.someInput);
	 * ```
	 *
	 * ```
	 * <textarea insert-paste-listener></textarea>
	 * ```
	 */
	zaa.directive('insertPasteListener', ['$rootScope', function($rootScope) {
		return {
			restrict: 'A',
		    link: function(scope, element, attrs) {
		    	element.bind("focus", function() {
		    		$rootScope.lastElement = element[0];
		    		var offCallFn = $rootScope.$on('insertPasteListener', function(e, val) {
		    			var domElement = $rootScope.lastElement;

				    	if (domElement != element[0] || !domElement) {
				    		return false;
				    	}

				    	$rootScope.$$listeners.insertPasteListener=[];

				        if (document.selection) {
				        	domElement.focus();
				            var sel = document.selection.createRange();
				            sel.text = val;
				            domElement.focus();
				        } else if (domElement.selectionStart || domElement.selectionStart === 0) {
				            var startPos = domElement.selectionStart;
				            var endPos = domElement.selectionEnd;
				            var scrollTop = domElement.scrollTop;
				            domElement.value = domElement.value.substring(0, startPos) + val + domElement.value.substring(endPos, domElement.value.length);
				            domElement.focus();
				            domElement.selectionStart = startPos + val.length;
				            domElement.selectionEnd = startPos + val.length;
				            domElement.scrollTop = scrollTop;
				        } else {
				            domElement.value += val;
				            domElement.focus();
				        }
				    });
		    	});
		    }
	  }
	}]);

	zaa.factory('CacheReloadService', function($http, $window) {

		var service = [];

		service.reload = function() {
			$http.get("admin/api-admin-common/cache").then(function(response) {
				$window.location.reload();
			});
		}

		return service;

	});

	zaa.filter('srcbox', function() {
		return function(input, search) {
			if (!input) return input;
			if (!search) return input;
			var expected = ('' + search).toLowerCase();
			var result = {};
			angular.forEach(input, function(value, key) {
				angular.forEach(value, function(kv, kk) {
					var actual = ('' + kv).toLowerCase();
					if (actual.indexOf(expected) !== -1) {
						result[key] = value;
					}
				});
		    });
		    return result;
	    }
	});

	zaa.filter('trustAsResourceUrl', function($sce) {
	    return function(val, enabled) {
	    	if (!enabled) {
	    		return null;
	    	}
	        return $sce.trustAsResourceUrl(val);
	    };
	});

	zaa.factory("LuyaLoading", function($timeout) {

		var state = false;
		var stateMessage = null;
		var timeoutPromise = null;

		return {
			start : function(myMessage) {
				if (myMessage == undefined) {
					stateMessage = i18n['js_zaa_server_proccess'];
				} else {
					stateMessage = myMessage;
				}
				// rm previous timeouts
				$timeout.cancel(timeoutPromise);

				timeoutPromise = $timeout(function() {
					state = true;
				}, 2000);
			},
			stop : function() {
				$timeout.cancel(timeoutPromise);
				state = false;
			},
			getStateMessage : function() {
				return stateMessage;
			},
			getState : function() {
				return state;
			}
		}
	});

	zaa.factory("AdminClassService", function() {

		var service = [];

		service.vars = [];

		service.getClassSpace = function(spaceName) {
			if (service.vars.hasOwnProperty(spaceName)) {
				return service.vars[spaceName];
			}
		}

		service.setClassSpace = function(spaceName, className) {
			service.vars[spaceName] = className;
		}

		return service;
	});

	/**
	 * Example usage of luya admin modal:
	 *
	 * ```
	 * <button ng-click="modalState=!modalState">Toggle Modal</button>
     * <modal is-modal-hidden="modalState">
     * 	  <h1>Modal Container</h1>
     *    <p>Hello world!</p>
     * </modal>
     * ```
	 */
	zaa.directive("modal", function($timeout) {
		return {
			restrict: "E",
			scope: {
				isModalHidden: "="
			},
			replace: true,
			transclude: true,
			templateUrl: "modal",
		}
	});

	zaa.controller("DashboardController", function($scope) {

		$scope.date = null;

	});

	// factory.js
	zaa.factory("authInterceptor", function($rootScope, $q, AdminToastService) {
		return {
			request: function (config) {
				config.headers = config.headers || {};
				config.headers.Authorization = "Bearer " + authToken;
				config.headers['X-CSRF-Token'] = $('meta[name="csrf-token"]').attr("content");
				return config;
			},
			responseError: function(data) {
				if (data.status == 401) {
					window.location = "admin/default/logout";
				}
				if (data.status != 422){
					AdminToastService.error("Response Error: " + data.status + " " + data.statusText, 5000);
				}
				return $q.reject(data);
			}
		};
	});


})();

// jquery helpers

/* non angular activeWindow send - testing purpose */
var activeWindowRegisterForm = function(form, callback, cb) {
	$(form).submit(function(event) {
	  event.preventDefault();
      var activeWindowHash = $("[ng-controller=\""+ngrestConfigHash+"\"]").scope().data.aw.id;
	  $.ajax({
		  url: activeWindowCallbackUrl + "?activeWindowCallback=" + callback + "&ngrestConfigHash=" + ngrestConfigHash + "&activeWindowHash=" + activeWindowHash,
		  data: $(form).serialize(),
		  type: "POST",
		  dataType: "json",
		  success: function(transport) {
			  cb.call(this, transport);
		  },
		  error: function(transport) {
			  alert("we have an async error");
		  }
		});
	});
}

var activeWindowAsyncGet = function(callback, params, cb) {
	var activeWindowHash = $("[ng-controller=\""+ngrestConfigHash+"\"]").scope().data.activeWindow.id;
	$.ajax({
		url: activeWindowCallbackUrl + "?activeWindowCallback=" + callback + "&ngrestConfigHash=" + ngrestConfigHash + "&activeWindowHash=" + activeWindowHash,
		data: params,
		type: "GET",
		dataType: "json",
		success: function(transport) {
			  cb.call(this, transport);
		  },
		  error: function(transport) {
			  alert("we have an async error");
		  }
	});
};
